"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7712],{1445:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return J},default:function(){return H},frontMatter:function(){return D},metadata:function(){return F},toc:function(){return z}});var a=t(7462),i=t(3366),s=t(7294),r=t(3905),u=t(5064),l=t(8215),o=t(1868);function m(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var p=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function d(){var e=s.useState((function(){return m(0,10)})),n=e[0],t=e[1];return s.createElement(o.L2,{className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",onRequestAppend:function(e){var a=(+e.groupKey||0)+1;t([].concat(n,m(a,10)))}},n.map((function(e){return s.createElement(p,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function c(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var g=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg","data-grid-maintained-target":"true",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function y(){var e=s.useState((function(){return c(0,10)})),n=e[0],t=e[1];return s.createElement(o.vK,{className:"container",style:{height:"500px"},container:!0,gap:5,onRequestAppend:function(e){var a=(+e.groupKey||0)+1;t([].concat(n,c(a,10)))}},n.map((function(e){return s.createElement(g,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function v(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var k=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs",style:{width:"100%",height:"100%"}}))};function f(){var e=s.useState((function(){return v(0,10)})),n=e[0],t=e[1];return s.createElement(o.rr,{className:"container",frame:[[1,1,2,3,3],[1,1,4,4,5]],style:{height:"500px"},container:!0,gap:5,onRequestAppend:function(e){var a=(+e.groupKey||0)+1;t([].concat(n,v(a,10)))}},n.map((function(e){return s.createElement(k,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function h(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var x=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs",style:{width:"100%",height:"100%"}}))};function I(){var e=s.useState((function(){return h(0,10)})),n=e[0],t=e[1];return s.createElement(o.Mh,{className:"container",style:{height:"500px"},container:!0,gap:5,onRequestAppend:function(e){var a=(+e.groupKey||0)+1;t([].concat(n,h(a,10)))}},n.map((function(e){return s.createElement(x,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function N(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var T=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function K(){var e=s.useState((function(){return N(0,10)})),n=e[0],t=e[1];return s.createElement(o.L2,{className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",onRequestAppend:function(e){var a=(+e.groupKey||0)+1;e.wait(),setTimeout((function(){e.ready(),t([].concat(n,N(a,10)))}),1e3)}},n.map((function(e){return s.createElement(T,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function b(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var G=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function j(){var e=s.useState((function(){return b(0,10)})),n=e[0],t=e[1];return s.createElement(o.L2,{className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",placeholder:s.createElement("div",{className:"placeholder"}),onRequestAppend:function(e){var a=(+e.groupKey||0)+1;e.wait(),e.currentTarget.appendPlaceholders(5,a),setTimeout((function(){e.ready(),t([].concat(n,b(a,10)))}),1e3)}},n.map((function(e){return s.createElement(G,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function E(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var R=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function A(){var e=s.useState((function(){return E(0,10)})),n=e[0],t=e[1];return s.createElement(o.L2,{className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",loading:s.createElement("div",{className:"loading"},"Loading..."),onRequestAppend:function(e){var a=(+e.groupKey||0)+1;e.wait(),setTimeout((function(){e.ready(),t([].concat(n,E(a,10)))}),1e3)}},n.map((function(e){return s.createElement(R,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})})))}function S(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var C=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function w(){var e=s.useRef(),n=s.useRef(),t=s.useState((function(){return S(0,10)})),a=t[0],i=t[1],r=s.useState([]),u=r[0],l=r[1],m=s.useState(null),p=m[0],d=m[1],c=s.useState([]),g=c[0],y=c[1];return s.createElement("div",{className:"root"},s.createElement("div",{style:{textAlign:"center",padding:"10px"}},s.createElement("button",{className:"button",onClick:function(){d(e.current.getStatus()),y(a)}},"Get Status")),s.createElement(o.L2,{ref:e,className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",onRequestAppend:function(e){var n=(+e.groupKey||0)+1;e.wait(),setTimeout((function(){e.ready(),i([].concat(a,S(n,10)))}),100)}},a.map((function(e){return s.createElement(C,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})}))),s.createElement("div",{style:{textAlign:"center",padding:"10px"}},s.createElement("button",{className:"button",onClick:function(){l(g),setTimeout((function(){p&&n.current.setStatus(p)}))}},"Restore Status")),s.createElement(o.L2,{className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",ref:n},u.map((function(e){return s.createElement(C,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})}))))}var M=t(3854);function q(e,n){for(var t=[],a=e*n,i=0;i<n;++i)t.push({groupKey:e,key:a+i});return t}var P=function(e){var n=e.num;return s.createElement("div",{className:"item",style:{width:"250px"}},s.createElement("div",{className:"thumbnail"},s.createElement("img",{src:"https://naver.github.io/egjs-infinitegrid/assets/image/"+(n%33+1)+".jpg",alt:"egjs"})),s.createElement("div",{className:"info"},"egjs "+n))};function B(){var e=s.useRef(),n=s.useRef(),t=s.useState((function(){return q(0,10)})),a=t[0],i=t[1],r=s.useState([]),u=r[0],l=r[1],m=s.useState(null),p=m[0],d=m[1],c=s.useState([]),g=c[0],y=c[1];return s.createElement("div",{className:"root"},s.createElement("div",{style:{textAlign:"center",padding:"10px"}},s.createElement("button",{className:"button",onClick:function(){var n=e.current.getStatus(M.Z2.MINIMIZE_INVISIBLE_ITEMS),t=n.groupManager.itemCursors,i=t[0],s=t[1];d(n),y(a.slice(i,s+1))}},"Get Status")),s.createElement(o.L2,{ref:e,className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",onRequestAppend:function(e){var n=(+e.groupKey||0)+1;e.wait(),setTimeout((function(){e.ready(),i([].concat(a,q(n,10)))}),100)}},a.map((function(e){return s.createElement(P,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})}))),s.createElement("div",{style:{textAlign:"center",padding:"10px"}},s.createElement("button",{className:"button",onClick:function(){l(g),setTimeout((function(){p&&n.current.setStatus(p)}))}},"Restore Status")),s.createElement(o.L2,{className:"container",style:{height:"500px"},container:!0,gap:5,align:"center",ref:n,placeholder:s.createElement("div",{className:"placeholder"}),onRequestPrepend:function(e){e.isVirtual&&(e.wait(),setTimeout((function(){e.ready(),l([].concat(q(e.nextGroupKey,10),u))}),200))},onRequestAppend:function(e){e.isVirtual&&(e.wait(),setTimeout((function(){e.ready(),l([].concat(u,q(e.nextGroupKey,10)))}),200))}},u.map((function(e){return s.createElement(P,{"data-grid-groupkey":e.groupKey,key:e.key,num:e.key})}))))}var Z=t(2171);function V(e,n,t){return e.replace(/#ClassName/g,n).replace(/#DeClassName/g,t)}function L(e,n,t){var a=[];for(var i in n)a.push(t(i,n[i]));return e.replace(/#Options/,a.join("\n"))}function _(e,n){return e.replace(/#Maintained/,n?'data-grid-maintained-target="true"':"")}var Y=function(e){var n=e.className,t=e.hasMaintained,a=e.options||{gap:5},i=(" "+n).replace(/([a-z ])([A-Z])/g,(function(e,n,t){return n+"-"+t.toLowerCase()})).substr(2),r=e.htmlCode,o=e.angularComponentCode,m=V(e.jsCode,n,i),p=V(e.reactCode,n,i),d=V(e.vueCode,n,i),c=V(e.angularHTMLCode,n,i),g=V(e.svelteCode,n,i);return m=L(m,a,(function(e,n){return"  "+e+": "+JSON.stringify(n)+","})),p=L(p,a,(function(e,n){return"    "+e+"={"+JSON.stringify(n)+"}"})),d=L(d,a,(function(e,n){return"    v-bind:"+e+'="'+JSON.stringify(n)+'"'})),c=L(c,a,(function(e,n){return"  ["+e+']="'+JSON.stringify(n)+'"'})),g=L(g,a,(function(e,n){return"  "+e+"={"+JSON.stringify(n)+"}"})),m=_(m,t),p=_(p,t),d=_(d,t),c=_(c,t),g=_(g,t),s.createElement(u.Z,{groupId:"cfc",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"React",value:"react"},{label:"Vue@2",value:"vue"},{label:"Vue@3",value:"vue3"},{label:"Angular",value:"angular"},{label:"Svelte",value:"svelte"}]},s.createElement(l.Z,{value:"js"},s.createElement(Z.Z,{className:"html"},r),s.createElement(Z.Z,{className:"js"},m)),s.createElement(l.Z,{value:"react"},s.createElement(Z.Z,{className:"jsx"},p)),s.createElement(l.Z,{value:"vue"},s.createElement(Z.Z,{className:"html"},d)),s.createElement(l.Z,{value:"vue3"},s.createElement(Z.Z,{className:"html"},d.replace("vue-infinitegrid","vue3-infinitegrid"))),s.createElement(l.Z,{value:"angular"},s.createElement(Z.Z,{className:"html"},c),s.createElement(Z.Z,{className:"ts"},o)),s.createElement(l.Z,{value:"svelte"},s.createElement(Z.Z,{className:"html"},g)))},O=function(e){return s.createElement(Y,(0,a.Z)({htmlCode:'<div class="container"></div>\n',reactCode:'import * as React from "react";\nimport { #ClassName } from "@egjs/react-infinitegrid";\n\nfunction getItems(nextGroupKey: number, count: number) {\n  const nextItems = [];\n  const nextKey = nextGroupKey * count;\n\n  for (let i = 0; i < count; ++i) {\n    nextItems.push({ groupKey: nextGroupKey, key: nextKey + i });\n  }\n  return nextItems;\n}\n\nconst Item = ({ num }: any) => <div className="item" style={{\n  width: "250px",\n}}>\n  <div className="thumbnail">\n    <img\n      src={`https://naver.github.io/egjs-infinitegrid/assets/image/${(num % 33) + 1}.jpg`}\n      alt="egjs" #Maintained\n    />\n  </div>\n  <div className="info">{`egjs ${num}`}</div>\n</div>;\n\nexport default function App() {\n  const [items, setItems] = React.useState(() => getItems(0, 10));\n\n  return <#ClassName\n    className="container"\n#Options\n    onRequestAppend={(e) => {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      setItems([\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ]);\n    }}\n  >\n    {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n  </#ClassName>;\n}\n',jsCode:'import { #ClassName } from "@egjs/infinitegrid";\n\nfunction getItems(nextGroupKey, count) {\n  const nextItems = [];\n\n  for (let i = 0; i < count; ++i) {\n    const num = nextGroupKey * count + i;\n    nextItems.push(`<div class="item">\n  <div class="thumbnail">\n      <img src="https://naver.github.io/egjs-infinitegrid/assets/image/${(num % 33) + 1}.jpg" alt="egjs" #Maintained/>\n  </div>\n  <div class="info">egjs ${num}</div>\n</div>`);\n  }\n  return nextItems;\n}\nconst ig = new #ClassName(".container", {\n#Options\n});\n\nig.on("requestAppend", (e) => {\n  const nextGroupKey = (+e.groupKey || 0) + 1;\n\n  ig.append(getItems(nextGroupKey, 10), nextGroupKey);\n});\nig.renderItems();\n',vueCode:'<template>\n  <#DeClassName\n    class="container"\n#Options\n    v-on:request-append="onRequestAppend"\n  >\n    <div\n      class="item"\n      v-for="item in items"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    >\n      <div class="thumbnail">\n        <img\n          v-bind:src="\n            \'https://naver.github.io/egjs-infinitegrid/assets/image/\' +\n            ((item.key % 33) + 1) +\n            \'.jpg\'\n          "\n          alt="egjs" #Maintained\n        />\n      </div>\n      <div class="info">egjs {{ item.key }}</div>\n    </div>\n  </#DeClassName>\n</template>\n<script lang="ts">\nimport { #ClassName } from "@egjs/vue-infinitegrid";\n\nexport default {\n  components: {\n    #ClassName,\n  },\n  data() {\n    return {\n      items: this.getItems(0, 10),\n    };\n  },\n  methods: {\n    getItems(nextGroupKey: number, count: number) {\n      const nextItems: any[] = [];\n\n      for (let i = 0; i < count; ++i) {\n        const nextKey = nextGroupKey * count + i;\n\n        nextItems.push({ groupKey: nextGroupKey, key: nextKey });\n      }\n      return nextItems;\n    },\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      this.items = [...this.items, ...this.getItems(nextGroupKey, 10)];\n    },\n  },\n};\n<\/script>\n',angularHTMLCode:'<div Ngx#ClassName\n  class="container"\n#Options\n  [items]="items"\n  [trackBy]="trackBy"\n  [groupBy]="groupBy"\n  (requestAppend)="onRequestAppend($event)"\n  *ngFor="let item of [0]; trackBy: randomTrackBy;"\n  #ig\n  >\n  <div class="item" *ngFor ="let item of ig.visibleItems; trackBy: trackBy;">\n    <div class="thumbnail">\n        <img [src]="\'https://naver.github.io/egjs-infinitegrid/assets/image/\' + (item.data.key % 33 + 1) + \'.jpg\'" alt="egjs" #Maintained/>\n    </div>\n    <div class="info">egjs {{item.data.key}}</div>\n  </div>\n</div>\n',angularComponentCode:"import { Component, Input } from '@angular/core';\nimport { OnRequestAppend } from '@egjs/infinitegrid';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  items = this.getItems(0, 10);\n  getItems(nextGroupKey: number, count: number) {\n    const nextItems = [];\n    const nextKey = nextGroupKey * count;\n\n    for (let i = 0; i < count; ++i) {\n      nextItems.push({ groupKey: nextGroupKey, key: nextKey + i });\n    }\n    return nextItems;\n  }\n  groupBy(_: any, item: any) {\n    return item.groupKey;\n  }\n  trackBy(_: any, item: any) {\n    return item.key;\n  }\n  onRequestAppend(e: OnRequestAppend) {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    this.items = [\n      ...this.items,\n      ...this.getItems(nextGroupKey, 10),\n    ];\n  }\n}\n",svelteCode:'<script>\n  import { #ClassName } from "@egjs/svelte-infinitegrid";\n\n  let items = getItems(0, 10);\n\n  function getItems(nextGroupKey, count) {\n    const nextItems = [];\n\n    for (let i = 0; i < count; ++i) {\n      const nextKey = nextGroupKey * count + i;\n\n      nextItems.push({ groupKey: nextGroupKey, key: nextKey });\n    }\n    return nextItems;\n  }\n<\/script>\n\n<#ClassName\n  class="container"\n#Options\n  {items}\n  on:requestAppend={({ detail: e }) => {\n    const nextGroupKey = (+e.groupKey || 0) + 1;\n\n    items = [...items, ...getItems(nextGroupKey, 10)];\n  }}\n  let:visibleItems\n>\n  {#each visibleItems as item (item.key)}\n    <div class="item">\n      <div class="thumbnail">\n        <img\n          src={`https://naver.github.io/egjs-infinitegrid/assets/image/${\n            (item.key % 33) + 1\n          }.jpg`}\n          alt="egjs" #Maintained\n        />\n      </div>\n      <div class="info">{`egjs ${item.key}`}</div>\n    </div>\n  {/each}\n</#ClassName>\n'},e))},U=function(e){return s.createElement(Y,(0,a.Z)({htmlCode:'<div class="container"></div>\n',reactCode:'import * as React from "react";\nimport { #ClassName } from "@egjs/react-infinitegrid";\n\nfunction getItems(nextGroupKey: number, count: number) {\n  const nextItems = [];\n  const nextKey = nextGroupKey * count;\n\n  for (let i = 0; i < count; ++i) {\n    nextItems.push({ groupKey: nextGroupKey, key: nextKey + i });\n  }\n  return nextItems;\n}\n\nconst Item = ({ num }: any) => <div className="item" style={{\n  width: "250px",\n}}>\n  <div className="thumbnail">\n    <img\n      src={`https://naver.github.io/egjs-infinitegrid/assets/image/${(num % 33) + 1}.jpg`}\n      alt="egjs" #Maintained\n    />\n  </div>\n  <div className="info">{`egjs ${num}`}</div>\n</div>;\n\nexport default function App() {\n  const [items, setItems] = React.useState(() => getItems(0, 10));\n\n  return <#ClassName\n    className="container"\n#Options\n    placeholder={<div className="placeholder"></div>}\n    onRequestPrepend={(e) => {\n      if (e.isVirtual) {\n        e.wait();\n        setTimeout(() => {\n          e.ready();\n          setItems([\n            ...getItems(e.nextGroupKey, 10),\n            ...items,\n          ]);\n        }, 200);\n      }\n    }}\n    onRequestAppend={(e) => {\n      if (e.isVirtual) {\n        e.wait();\n        setTimeout(() => {\n          e.ready();\n          setItems([\n            ...items,\n            ...getItems(e.nextGroupKey, 10),\n          ]);\n        }, 200);\n      }\n    }}\n  >\n    {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n  </#ClassName>;\n}\n',jsCode:'import { #ClassName } from "@egjs/infinitegrid";\n\nfunction getItems(nextGroupKey, count) {\n  const nextItems = [];\n\n  for (let i = 0; i < count; ++i) {\n    const num = nextGroupKey * count + i;\n    nextItems.push(`<div class="item">\n  <div class="thumbnail">\n      <img src="https://naver.github.io/egjs-infinitegrid/assets/image/${(num % 33) + 1}.jpg" alt="egjs" #Maintained/>\n  </div>\n  <div class="info">egjs ${num}</div>\n</div>`);\n  }\n  return nextItems;\n}\nconst ig = new #ClassName(".container", {\n#Options\n});\n\nig.setPlaceholder({\n  html: `<div class="placeholder"></div>`,\n});\n\n\nig.on("requestPrepend", e => {\n  if (e.isVirtual) {\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      ig.prepend(getItems(nextGroupKey, 10), nextGroupKey);\n    }, 200);\n  }\n});\nig.on("requestAppend", e => {\n  if (e.isVirtual) {\n    e.wait();\n    e.currentTarget.appendPlaceholders(5, nextGroupKey);\n    setTimeout(() => {\n      e.ready();\n      ig.append(getItems(nextGroupKey, 10), nextGroupKey);\n    }, 200);\n  }\n});\nig.renderItems();\n',vueCode:'<template>\n  <#DeClassName\n    class="container"\n#Options\n    v-on:request-append="onRequestAppend"\n    v-on:request-prepend="onRequestPrepend"\n  >\n    <div\n      class="item"\n      v-for="item in items"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    >\n      <div class="thumbnail">\n        <img\n          v-bind:src="\n            \'https://naver.github.io/egjs-infinitegrid/assets/image/\' +\n            ((item.key % 33) + 1) +\n            \'.jpg\'\n          "\n          alt="egjs" #Maintained\n        />\n      </div>\n      <div class="info">egjs {{ item.key }}</div>\n    </div>\n    <template v-slot:placeholder="{ item }">\n    <div\n      class="placeholder"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    ></div>\n  </template>\n  </#DeClassName>\n</template>\n<script lang="ts">\nimport { #ClassName } from "@egjs/vue-infinitegrid";\n\nexport default {\n  components: {\n    #ClassName,\n  },\n  data() {\n    return {\n      items: this.getItems(0, 10),\n    };\n  },\n  methods: {\n    getItems(nextGroupKey: number, count: number) {\n      const nextItems: any[] = [];\n\n      for (let i = 0; i < count; ++i) {\n        const nextKey = nextGroupKey * count + i;\n\n        nextItems.push({ groupKey: nextGroupKey, key: nextKey });\n      }\n      return nextItems;\n    },\n    onRequestPrepend(e: OnRequestPrepend) {\n    if (e.isVirtual) {\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.getItems(e.nextGroupKey, 10),\n          ...this.items,\n        ];\n      }, 200);\n    }\n  },\n  onRequestAppend(e: OnRequestAppend) {\n    if (e.isVirtual) {\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...this.getItems(e.nextGroupKey, 10),\n        ];\n      }, 200);\n    }\n  },\n};\n<\/script>\n',angularHTMLCode:'<div Ngx#ClassName\n  class="container"\n#Options\n  [items]="items"\n  [usePlaceholder]="true"\n  [trackBy]="trackBy"\n  [groupBy]="groupBy"\n  (requestAppend)="onRequestAppend($event)"\n  (requestPrepend)="onRequestPrepend($event)"\n  *ngFor="let item of [0]; trackBy: randomTrackBy;"\n  #ig\n  >\n  <ng-container *ngFor ="let item of ig.visibleItems; trackBy: trackBy;">\n    <div class="item" *ngIf="item.type === ITEM_TYPE.NORMAL">\n      <div class="thumbnail">\n          <img [src]="\'https://naver.github.io/egjs-infinitegrid/assets/image/\' + (item.data.key % 33 + 1) + \'.jpg\'" alt="egjs" #Maintained/>\n      </div>\n      <div class="info">egjs {{item.data.key}}</div>\n    </div>\n    <div class="placeholder" *ngIf="item.type === ITEM_TYPE.VIRTUAL"></div>\n  </ng-contianer>\n</div>\n',angularComponentCode:"import { Component, Input } from '@angular/core';\nimport { ITEM_TYPE, OnRequestPrepend, OnRequestAppend } from '@egjs/infinitegrid';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  ITEM_TYPE = ITEM_TYPE;\n  items = this.getItems(0, 10);\n  getItems(nextGroupKey: number, count: number) {\n    const nextItems = [];\n    const nextKey = nextGroupKey * count;\n\n    for (let i = 0; i < count; ++i) {\n      nextItems.push({ groupKey: nextGroupKey, key: nextKey + i });\n    }\n    return nextItems;\n  }\n  onRequestPrepend(e: OnRequestPrepend) {\n    if (e.isVirtual) {\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.getItems(e.nextGroupKey, 10),\n          ...this.items,\n        ];\n      }, 200);\n    }\n  }\n  onRequestAppend(e: OnRequestAppend) {\n    if (e.isVirtual) {\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...this.getItems(e.nextGroupKey, 10),\n        ];\n      }, 200);\n    }\n  }\n}\n",svelteCode:'<script>\n  import { #ClassName } from "@egjs/svelte-infinitegrid";\n  import { ITEM_TYPE } from "@egjs/infinitegrid";\n\n  let items = getItems(0, 10);\n\n  function getItems(nextGroupKey, count) {\n    const nextItems = [];\n\n    for (let i = 0; i < count; ++i) {\n      const nextKey = nextGroupKey * count + i;\n\n      nextItems.push({ groupKey: nextGroupKey, key: nextKey });\n    }\n    return nextItems;\n  }\n<\/script>\n\n<#ClassName\n  class="container"\n#Options\n  {items}\n  usePlaceholder={true}\n  on:requestPrepend={({ detail: e }) => {\n      if (e.isVirtual) {\n        e.wait();\n        setTimeout(() => {\n          e.ready();\n          items = [\n            ...getItems(e.nextGroupKey, 10),\n            ...items,\n          ];\n        }, 200);\n      }\n    }}\n    on:requestAppend={({ detail: e }) => {\n      if (e.isVirtual) {\n        e.wait();\n        setTimeout(() => {\n          e.ready();\n          items =[\n            ...items,\n            ...getItems(e.nextGroupKey, 10),\n          ];\n        }, 200);\n      }\n    }}\n  let:visibleItems\n>\n  {#each visibleItems as item (item.key)}\n    {#if item.type === ITEM_TYPE.NORMAL}\n      <div class="item">\n        <div class="thumbnail">\n          <img\n            src={`https://naver.github.io/egjs-infinitegrid/assets/image/${\n              (item.key % 33) + 1\n            }.jpg`}\n            alt="egjs" #Maintained\n          />\n        </div>\n        <div class="info">{`egjs ${item.key}`}</div>\n      </div>\n    {:else if item.type === ITEM_TYPE.VIRTUAL}\n      <div class="placeholder" />\n    {/if}\n  {/each}\n</#ClassName>\n'},e))},$=["components"],D={title:"Guides",custom_edit_url:null},J="Guides",F={type:"mdx",permalink:"/egjs-infinitegrid/ko/Guides",source:"@site/src/pages/Guides.mdx"},z=[{value:"Grid Types",id:"grid-types",children:[{value:"MasonryInfiniteGrid",id:"masonryinfinitegrid",children:[]},{value:"JustifiedInfiniteGrid",id:"justifiedinfinitegrid",children:[]},{value:"FrameInfiniteGrid",id:"frameinfinitegrid",children:[]},{value:"PackingInfiniteGrid",id:"packinginfinitegrid",children:[]}]},{value:"Insert Data",id:"insert-data",children:[]},{value:"Wait Data Loading",id:"wait-data-loading",children:[{value:"Use wait &amp; ready",id:"use-wait--ready",children:[]},{value:"Use Placeholder",id:"use-placeholder",children:[]},{value:"Use loading",id:"use-loading",children:[]}]},{value:"Restore Status",id:"restore-status",children:[{value:"Get Status &amp; Restore Status",id:"get-status--restore-status",children:[]},{value:"Restore Visible Status",id:"restore-visible-status",children:[]},{value:"Restore Visible Status with virtual items",id:"restore-visible-status-with-virtual-items",children:[]}]}],W={toc:z};function H(e){var n=e.components,t=(0,i.Z)(e,$);return(0,r.kt)("wrapper",(0,a.Z)({},W,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"guides"},"Guides"),(0,r.kt)("h2",{id:"grid-types"},"Grid Types"),(0,r.kt)("h3",{id:"masonryinfinitegrid"},"MasonryInfiniteGrid"),(0,r.kt)("p",null,"MasonryInfiniteGrid is a grid that stacks items with the same width as a stack of bricks. Adjust the width of all images to the same size, find the lowest height column, and insert a new item."),(0,r.kt)(d,{mdxType:"MasonryInfiniteGrid"}),(0,r.kt)(O,{className:"MasonryInfiniteGrid",mdxType:"InfiniteGridDefaultCode"}),(0,r.kt)("h3",{id:"justifiedinfinitegrid"},"JustifiedInfiniteGrid"),(0,r.kt)("p",null,"'justified' is a printing term with the meaning that 'it fits in one row wide'. JustifiedGrid is a grid that the item is filled up on the basis of a line given a size."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If 'data-grid-inline-offset' or 'data-grid-content-offset' are set for item element, the ratio is maintained except for the offset value."),(0,r.kt)("li",{parentName:"ul"},"If 'data-grid-maintained-target' is set for an element whose ratio is to be maintained, the item is rendered while maintaining the ratio of the element.")),(0,r.kt)(y,{mdxType:"JustifiedInfiniteGrid"}),(0,r.kt)(O,{className:"JustifiedInfiniteGrid",hasMaintained:!0,mdxType:"InfiniteGridDefaultCode"}),(0,r.kt)("h3",{id:"frameinfinitegrid"},"FrameInfiniteGrid"),(0,r.kt)("p",null,"'Frame' is a printing term with the meaning that 'it fits in one row wide'. FrameGrid is a grid that the item is filled up on the basis of a line given a size."),(0,r.kt)(f,{mdxType:"FrameInfiniteGrid"}),(0,r.kt)(O,{className:"FrameInfiniteGrid",options:{gap:5,frame:[[1,1,2,3,3],[1,1,4,4,5]]},mdxType:"InfiniteGridDefaultCode"}),(0,r.kt)("h3",{id:"packinginfinitegrid"},"PackingInfiniteGrid"),(0,r.kt)("p",null,"The PackingGrid is a grid that shows the important items bigger without sacrificing the weight of the items."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rows and columns are separated so that items are dynamically placed within the horizontal and vertical space rather than arranged in an orderly fashion."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"sizeWeight")," is higher than ",(0,r.kt)("inlineCode",{parentName:"li"},"ratioWeight"),", the size of items is preserved as much as possible."),(0,r.kt)("li",{parentName:"ul"},"Conversely, if ",(0,r.kt)("inlineCode",{parentName:"li"},"ratioWeight")," is higher than ",(0,r.kt)("inlineCode",{parentName:"li"},"sizeWeight"),", the ratio of items is preserved as much as possible.")),(0,r.kt)(I,{mdxType:"PackingInfiniteGrid"}),(0,r.kt)(O,{className:"PackingInfiniteGrid",mdxType:"InfiniteGridDefaultCode"}),(0,r.kt)("h2",{id:"insert-data"},"Insert Data"),(0,r.kt)("p",null,"Through scrolling, when the scroll reaches the end, the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestAppend")," event is raised, and when it reaches the start, the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestPrepend")," event is raised. You can add data within this event."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can set the key of an item through ",(0,r.kt)("inlineCode",{parentName:"li"},"itemBy")," prop."),(0,r.kt)("li",{parentName:"ul"},"You can set the group's key through ",(0,r.kt)("inlineCode",{parentName:"li"},"groupBy")," prop.")),(0,r.kt)(d,{mdxType:"MasonryInfiniteGrid"}),(0,r.kt)(u.Z,{groupId:"cfc",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"React",value:"react"},{label:"Vue@2",value:"vue"},{label:"Vue@3",value:"vue3"},{label:"Angular",value:"angular"},{label:"Svelte",value:"svelte"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"append")," method or ",(0,r.kt)("inlineCode",{parentName:"p"},"prepend")," method is used, there is no need to use a separate key. You can set the groupKey through the second argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ig.on("requestAppend", e => {\n  const nextGroupKey = (+e.groupKey || 0) + 1;\n\n  ig.append(getItems(nextGroupKey, 10), nextGroupKey);\n});\n'))),(0,r.kt)(l.Z,{value:"react",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"React's groupBy default is jsx's ",(0,r.kt)("inlineCode",{parentName:"li"},"data-grid-groupkey")," prop. (attributePrefix: data-grid-)"),(0,r.kt)("li",{parentName:"ul"},"React's itemBy default is jsx's key.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const [items, setItems] = React.useState([]);\n\n<MasonryInfiniteGrid\n  groupBy={(jsx) => jsx.props["data-grid-groupkey"]}\n  itemBy={(jsx) => jsx.key}\n  onRequestAppend={(e) => {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    setItems([\n      ...items,\n      ...getItems(nextGroupKey, 10),\n    ]);\n  }}>\n  {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n</MasonryInfiniteGrid>\n'))),(0,r.kt)(l.Z,{value:"vue",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vue's groupBy default is jsx's ",(0,r.kt)("inlineCode",{parentName:"li"},"data-grid-groupkey")," prop. (attributePrefix: data-grid-)"),(0,r.kt)("li",{parentName:"ul"},"Vue's itemBy default is jsx's key.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid\n  :itemBy="itemBy"\n  :groupBy="groupBy"\n  @request-append="onRequestAppend">\n  <div\n    class="item"\n    v-for="item in items"\n    :key="item.key"\n    :data-grid-groupkey="item.groupKey"\n  >\n    ...\n  </div>\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    itemBy(jsx) {\n      const key = jsx.key;\n\n      return key == null ? i : key;\n    },\n    groupBy(jsx) {\n      const props = jsx.props || jsx.data?.attrs;\n\n      return props ? props[`data-grid-groupkey`] : undefined;\n    },\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      this.items = [\n        ...this.items,\n        ...getItems(nextGroupKey, 10),\n      ];\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"vue3",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vue's groupBy default is jsx's ",(0,r.kt)("inlineCode",{parentName:"li"},"data-grid-groupkey")," prop. (attributePrefix: data-grid-)"),(0,r.kt)("li",{parentName:"ul"},"Vue's itemBy default is jsx's key.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid\n  :itemBy="itemBy"\n  :groupBy="groupBy"\n  @request-append="onRequestAppend">\n  <div\n    class="item"\n    v-for="item in items"\n    :key="item.key"\n    :data-grid-groupkey="item.groupKey"\n  >\n    ...\n  </div>\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    itemBy(jsx) {\n      const key = jsx.key;\n\n      return key == null ? i : key;\n    },\n    groupBy(jsx) {\n      const props = jsx.props || jsx.data?.attrs;\n\n      return props ? props[`${attributePrefix}groupkey`] : undefined;\n    },\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      this.items = [\n        ...this.items,\n        ...getItems(nextGroupKey, 10),\n      ];\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"angular",mdxType:"TabItem"},"* Angular uses `trackBy` instead of `itemBy`. * Angular's `groupBy` default is item's `groupKey`. * Angular's `trackBy` default is items's `key`.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div NgxMasonryInfiniteGrid\n  class="container"\n  [items]="items"\n  [trackBy]="trackBy"\n  [groupBy]="groupBy"\n  [useLoading]="true"\n  (requestAppend)="onRequestAppend($event)"\n  #ig\n  >\n  <div class="item" *ngFor ="let item of ig.visibleItems; trackBy: trackBy;">\n    ...\n  </div>\n</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default class App {\n  items = [];\n  groupBy(_: any, item: any) {\n    return item.groupKey;\n  }\n  trackBy(_: any, item: any) {\n    return item.key;\n  }\n  onRequestAppend(e) {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    this.items = [\n      ...this.items,\n      ...getItems(nextGroupKey, 10),\n    ];\n  }\n};\n"))),(0,r.kt)(l.Z,{value:"svelte",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Svelte's ",(0,r.kt)("inlineCode",{parentName:"li"},"groupBy")," default is item's ",(0,r.kt)("inlineCode",{parentName:"li"},"groupKey"),"."),(0,r.kt)("li",{parentName:"ul"},"Svelte's ",(0,r.kt)("inlineCode",{parentName:"li"},"itemBy")," default is items's ",(0,r.kt)("inlineCode",{parentName:"li"},"key"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script>\nlet items = [];\n<\/script>\n<MasonryInfiniteGrid\n  items={items}\n  groupBy={(item) => item.groupKey}\n  itemBy={(item) => item.key}\n  on:requestAppend={({ detail: e }) => {\n    items = [\n      ...items,\n      ...getItems(nextGroupKey, 10),\n    ];\n  }}>\n  {#each visibleItems as item (item.key)}\n    <div class="item"></div>\n  {/each}\n</MasonryInfiniteGrid>\n')))),(0,r.kt)("h2",{id:"wait-data-loading"},"Wait Data Loading"),(0,r.kt)("h3",{id:"use-wait--ready"},"Use wait & ready"),(0,r.kt)("p",null,"If you want to add items asynchronously, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"e.wait")," function and when the data is ready call the ",(0,r.kt)("inlineCode",{parentName:"p"},"e.ready")," function."),(0,r.kt)(K,{mdxType:"WaitReady"}),(0,r.kt)(u.Z,{groupId:"cfc",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"React",value:"react"},{label:"Vue@2",value:"vue"},{label:"Vue@3",value:"vue3"},{label:"Angular",value:"angular"},{label:"Svelte",value:"svelte"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ig.on("requestAppend", e => {\n  const nextGroupKey = (+e.groupKey || 0) + 1;\n\n  e.wait();\n\n  setTimeout(() => {\n    e.ready();\n    ig.append(getItems(nextGroupKey, 10), nextGroupKey);\n  }, 1000);\n});\n'))),(0,r.kt)(l.Z,{value:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const [items, setItems] = React.useState([]);\n\n<MasonryInfiniteGrid\n  onRequestAppend={(e) => {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      setItems([\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ]);\n    }, 1000);\n  }}>\n  {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n</MasonryInfiniteGrid>\n"))),(0,r.kt)(l.Z,{value:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...getItems(nextGroupKey, 10),\n        ];\n      }, 1000);\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"vue3",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...getItems(nextGroupKey, 10),\n        ];\n      }, 1000);\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"angular",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default class App {\n  items = [];\n  onRequestAppend(e) {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      this.items = [\n        ...this.items,\n        ...getItems(nextGroupKey, 10),\n      ];\n    }, 1000);\n  }\n};\n"))),(0,r.kt)(l.Z,{value:"svelte",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<script>\nlet items = [];\n<\/script>\n<MasonryInfiniteGrid\n  on:requestAppend={({ detail: e }) => {\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      items = [\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ];\n    }, 1000);\n  }}>\n  {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n</MasonryInfiniteGrid>\n")))),(0,r.kt)("h3",{id:"use-placeholder"},"Use Placeholder"),(0,r.kt)("p",null,"You can add placeholders to show instead while data is being loaded/added. The placeholder is placed on the grid instead of the actual item and can be maintained until the actual item is added."),(0,r.kt)(j,{mdxType:"Placeholder"}),(0,r.kt)(u.Z,{groupId:"cfc",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"React",value:"react"},{label:"Vue@2",value:"vue"},{label:"Vue@3",value:"vue3"},{label:"Angular",value:"angular"},{label:"Svelte",value:"svelte"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set a placeholder through the ",(0,r.kt)("inlineCode",{parentName:"p"},"ig.setPlaceholder")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ig.setPlaceholder({\n  html: `<div class="placeholder"></div>`,\n});\n\nig.on("requestAppend", e => {\n  const nextGroupKey = (+e.groupKey || 0) + 1;\n\n  e.wait();\n  e.currentTarget.appendPlaceholders(5, nextGroupKey);\n  setTimeout(() => {\n    e.ready();\n    ig.append(getItems(nextGroupKey, 10), nextGroupKey);\n  }, 1000);\n});\n'))),(0,r.kt)(l.Z,{value:"react",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set the placeholder via the placeholder prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const [items, setItems] = React.useState([]);\n\n<MasonryInfiniteGrid\n  placeholder={<div className="placeholder"></div>}\n  onRequestAppend={(e) => {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    e.wait();\n    e.currentTarget.appendPlaceholders(5, nextGroupKey);\n    setTimeout(() => {\n      e.ready();\n      setItems([\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ]);\n    }, 1000);\n  }}>\n  {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n</MasonryInfiniteGrid>\n'))),(0,r.kt)(l.Z,{value:"vue",mdxType:"TabItem"},(0,r.kt)("p",null,"A placeholder can be set via a placeholder slot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid\n  @request-append="onRequestAppend">\n  <div\n    class="item"\n    v-for="item in items"\n    :key="item.key"\n    :data-grid-groupkey="item.groupKey"\n  ></div>\n  <template v-slot:placeholder="{ item }">\n    <div\n      class="placeholder"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    ></div>\n  </template>\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      e.wait();\n      e.currentTarget.appendPlaceholders(5, nextGroupKey);\n\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...getItems(nextGroupKey, 10),\n        ];\n      }, 1000);\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"vue3",mdxType:"TabItem"},(0,r.kt)("p",null,"A placeholder can be set via a placeholder slot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid\n  @request-append="onRequestAppend">\n  <div\n    class="item"\n    v-for="item in items"\n    :key="item.key"\n    :data-grid-groupkey="item.groupKey"\n  ></div>\n  <template v-slot:placeholder="{ item }">\n    <div\n      class="placeholder"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    ></div>\n  </template>\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      e.wait();\n      e.currentTarget.appendPlaceholders(5, nextGroupKey);\n\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...getItems(nextGroupKey, 10),\n        ];\n      }, 1000);\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"angular",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set the placeholder via usePlaceholder(true)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div NgxMasonryInfiniteGrid\n  class="container"\n  [usePlaceholder]="true"\n  (requestAppend)="onRequestAppend($event)"\n  #ig\n  >\n  <ng-container *ngFor ="let item of ig.visibleItems; trackBy: trackBy;">\n    <div class="item" *ngIf="item.type === ITEM_TYPE.NORMAL"></div>\n    <div class="placeholder" *ngIf="item.type === ITEM_TYPE.VIRTUAL"></div>\n  </ng-container>\n</div>\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { ITEM_TYPE } from "@egjs/infinitegrid";\n\nexport default class App {\n  ITEM_TYPE = ITEM_TYPE;\n  items = [];\n  onRequestAppend(e) {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    e.wait();\n    e.currentTarget.appendPlaceholders(5, nextGroupKey);\n\n    setTimeout(() => {\n      e.ready();\n      this.items = [\n        ...this.items,\n        ...getItems(nextGroupKey, 10),\n      ];\n    }, 1000);\n  }\n};\n'))),(0,r.kt)(l.Z,{value:"svelte",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set the placeholder via usePlaceholder(true)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script>\nimport { ITEM_TYPE } from "@egjs/infinitegrid";\n\nlet items = [];\n<\/script>\n<MasonryInfiniteGrid\n  usePlaceholder={true}\n  on:requestAppend={({ detail: e }) => {\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      items = [\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ];\n    }, 1000);\n  }}\n  let:visibleItems\n>\n  {#each visibleItems as item (item.key)}\n    {#if item.type === ITEM_TYPE.NORMAL}\n      <div class="item"></div>\n    {:else if item.type === ITEM_TYPE.VIRTUAL}\n      <div class="placeholder" />\n    {/if}\n  {/each}\n</MasonryInfiniteGrid>\n')))),(0,r.kt)("h3",{id:"use-loading"},"Use loading"),(0,r.kt)("p",null,"You can show the loading bar while the data is loading. It can be added by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"e.wait")," function, and the loading bar automatically disappears when data is loaded."),(0,r.kt)(A,{mdxType:"Loading"}),(0,r.kt)(u.Z,{groupId:"cfc",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"React",value:"react"},{label:"Vue@2",value:"vue"},{label:"Vue@3",value:"vue3"},{label:"Angular",value:"angular"},{label:"Svelte",value:"svelte"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set a loading through the ",(0,r.kt)("inlineCode",{parentName:"p"},"ig.setLoading")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ig.setLoading({\n  html: `<div class="loading">Loading...</div>`,\n});\n\nig.on("requestAppend", e => {\n  const nextGroupKey = (+e.groupKey || 0) + 1;\n\n  e.wait();\n  setTimeout(() => {\n    e.ready();\n    ig.append(getItems(nextGroupKey, 10), nextGroupKey);\n  }, 1000);\n});\n'))),(0,r.kt)(l.Z,{value:"react",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set the loading via the loading prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const [items, setItems] = React.useState([]);\n\n<MasonryInfiniteGrid\n  loading={<div className="loading">Loading...</div>}\n  onRequestAppend={(e) => {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      setItems([\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ]);\n    }, 1000);\n  }}>\n  {items.map((item) => <Item data-grid-groupkey={item.groupKey} key={item.key} num={item.key} />)}\n</MasonryInfiniteGrid>\n'))),(0,r.kt)(l.Z,{value:"vue",mdxType:"TabItem"},(0,r.kt)("p",null,"A loading can be set via a loading slot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid\n  @request-append="onRequestAppend">\n  <div\n    class="item"\n    v-for="item in items"\n    :key="item.key"\n    :data-grid-groupkey="item.groupKey"\n  ></div>\n  <template v-slot:loading="{ item }">\n    <div\n      class="loading"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    >Loading...</div>\n  </template>\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...getItems(nextGroupKey, 10),\n        ];\n      }, 1000);\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"vue3",mdxType:"TabItem"},(0,r.kt)("p",null,"A loading can be set via a loading slot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid\n  @request-append="onRequestAppend">\n  <div\n    class="item"\n    v-for="item in items"\n    :key="item.key"\n    :data-grid-groupkey="item.groupKey"\n  ></div>\n  <template v-slot:loading="{ item }">\n    <div\n      class="loading"\n      :key="item.key"\n      :data-grid-groupkey="item.groupKey"\n    >Loading...</div>\n  </template>\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default {\n  data() {\n    return {\n      items: [],\n    },\n  },\n  methods: {\n    onRequestAppend(e) {\n      const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n      e.wait();\n      setTimeout(() => {\n        e.ready();\n        this.items = [\n          ...this.items,\n          ...getItems(nextGroupKey, 10),\n        ];\n      }, 1000);\n  },\n};\n"))),(0,r.kt)(l.Z,{value:"angular",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set the loading via useLoading(true)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div NgxMasonryInfiniteGrid\n  class="container"\n  [useLoading]="true"\n  (requestAppend)="onRequestAppend($event)"\n  #ig\n  >\n  <ng-container *ngFor ="let item of ig.visibleItems; trackBy: trackBy;">\n    <div class="item" *ngIf="item.type === ITEM_TYPE.NORMAL"></div>\n    <div class="loading" *ngIf="item.type === ITEM_TYPE.LOADING">Loading...</div>\n  </ng-container>\n</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { ITEM_TYPE } from "@egjs/infinitegrid";\n\nexport default class App {\n  ITEM_TYPE = ITEM_TYPE;\n  items = [];\n  onRequestAppend(e) {\n    const nextGroupKey = (+e.groupKey! || 0) + 1;\n\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      this.items = [\n        ...this.items,\n        ...getItems(nextGroupKey, 10),\n      ];\n    }, 1000);\n  }\n};\n'))),(0,r.kt)(l.Z,{value:"svelte",mdxType:"TabItem"},(0,r.kt)("p",null,"You can set the loading via useLoading(true)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script>\nimport { ITEM_TYPE } from "@egjs/infinitegrid";\n\nlet items = [];\n<\/script>\n<MasonryInfiniteGrid\n  useLoading={true}\n  on:requestAppend={({ detail: e }) => {\n    e.wait();\n    setTimeout(() => {\n      e.ready();\n      items = [\n        ...items,\n        ...getItems(nextGroupKey, 10),\n      ];\n    }, 1000);\n  }}\n  let:visibleItems\n>\n  {#each visibleItems as item (item.key)}\n    {#if item.type === ITEM_TYPE.NORMAL}\n      <div class="item"></div>\n    {:else if item.type === ITEM_TYPE.LOADING}\n      <div class="loading">Loading...</div>\n    {/if}\n  {/each}\n</MasonryInfiniteGrid>\n')))),(0,r.kt)("h2",{id:"restore-status"},"Restore Status"),(0,r.kt)("p",null,"You want to save the current status to storage before moving the page and restore it after returning the page."),(0,r.kt)("p",null,"If it does not support BF Cache like Safari, you need to save and restore the status."),(0,r.kt)("p",null,"InfiniteGrid provides a way to get and restore status."),(0,r.kt)("p",null,"If you want to restore dynamically, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"setStatus")," method."),(0,r.kt)("p",null,"In the framework, items must also be saved and restored."),(0,r.kt)("h3",{id:"get-status--restore-status"},"Get Status & Restore Status"),(0,r.kt)(w,{mdxType:"Status"}),(0,r.kt)(u.Z,{groupId:"cfc",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"React",value:"react"},{label:"Vue@2",value:"vue"},{label:"Vue@3",value:"vue3"},{label:"Angular",value:"angular"},{label:"Svelte",value:"svelte"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("p",null,"Get Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const status = ig.getStatus();\n")),(0,r.kt)("p",null,"Restore Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const ig = new MasonryInfiniteGrid(...);\n\nig.setStatus(status);\n"))),(0,r.kt)(l.Z,{value:"react",mdxType:"TabItem"},(0,r.kt)("p",null,"Get Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const igRef = React.useRef();\n\n\nigRef.current.getStatus();\n\n<MasonryInfiniteGrid\n  ref={igRef}>...</MasonryInfiniteGrid>\n")),(0,r.kt)("p",null,"Restore Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<MasonryInfiniteGrid\n  ref={igRef}\n  status={status}\n  >...</MasonryInfiniteGrid>\n"))),(0,r.kt)(l.Z,{value:"vue",mdxType:"TabItem"},(0,r.kt)("p",null,"Get Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid ref="ig">\n  ...\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"this.$refs.ig.getStatus();\n")),(0,r.kt)("p",null,"Restore Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid v-bind:status="status">\n  ...\n</masonry-infinite-grid>\n'))),(0,r.kt)(l.Z,{value:"vue3",mdxType:"TabItem"},(0,r.kt)("p",null,"Get Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid ref="ig">\n  ...\n</masonry-infinite-grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"this.$refs.ig.getStatus();\n")),(0,r.kt)("p",null,"Restore Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<masonry-infinite-grid v-bind:status="status">\n  ...\n</masonry-infinite-grid>\n'))),(0,r.kt)(l.Z,{value:"angular",mdxType:"TabItem"},(0,r.kt)("p",null,"Get Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<div NgxMasonryInfiniteGrid #ig>\n  ...\n</div>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Component, Input, AfterViewInit } from '@angular/core';\nimport { NgxInfiniteGridComponent } from '@egjs/ngx-infinitegrid';\n\nclass App {\n  @ViewChild(\"ig\") ig!: NgxInfiniteGridComponent;\n  getStatus() {\n    this.ig.getStatus();\n  }\n}\n")),(0,r.kt)("p",null,"Restore Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div NgxMasonryInfiniteGrid [status]="status" #ig>\n  ...\n</div>\n'))),(0,r.kt)(l.Z,{value:"svelte",mdxType:"TabItem"},(0,r.kt)("p",null,"Get Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"let ig;\n\nig.getStatus();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<MasonryInfiniteGrid\n  bind:this={ig}>\n</MasonryInfiniteGrid>\n")),(0,r.kt)("p",null,"Restore Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<MasonryInfiniteGrid\n  status={status}\n  bind:this={ig}>\n</MasonryInfiniteGrid>\n")))),(0,r.kt)("h3",{id:"restore-visible-status"},"Restore Visible Status"),(0,r.kt)("p",null,"To reduce the size of the status, only the status of the items in the visible area is fetched."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { STATUS_TYPE } from "@egjs/infinitegrid";\n\n// (default) gets all infos\nig.getStatus(STATUS_TYPE.NOT_REMOVE);\n\n// gets visible infos\nig.getStatus(STATUS_TYPE.REMOVE_INVISIBLE_GROUPS);\n\n// gets visible infos. However, the information is simplified for invisible items.\nig.getStatus(STATUS.MINIMIZE_INVISIBLE_ITEMS);\n\n// gets visible infos. However, invisible items are removed and only the outline remains.\nig.getStatus(STATUS.MINIMIZE_INVISIBLE_GROUPS);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { STATUS_TYPE } from "@egjs/infinitegrid";\n\nconst status = ig.getStatus(STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS);\nconst [startCursor, endCursor] = status.groupManager.itemCursors;\nconst itemsStatus = items.slice(startCursor, endCursor + 1);\n')),(0,r.kt)("h3",{id:"restore-visible-status-with-virtual-items"},"Restore Visible Status with virtual items"),(0,r.kt)("p",null,"Since you got the status for the visible area, replace it with a placeholder to handle the invisible area."),(0,r.kt)(B,{mdxType:"VisibleStatus"}),(0,r.kt)(U,{className:"MasonryInfiniteGrid",mdxType:"InfiniteGridStatusCode"}))}H.isMDXComponent=!0}}]);