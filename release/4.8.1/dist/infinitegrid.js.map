{"version":3,"file":"infinitegrid.js","sources":["../src/consts.ts","../src/InfiniteGridItem.ts","../src/LoadingGrid.ts","../src/utils.ts","../src/GroupManager.ts","../src/Infinite.ts","../src/Renderer/Renderer.ts","../src/Renderer/VanillaRenderer.ts","../src/Renderer/VanillaGridRenderer.ts","../src/ScrollManager.ts","../src/InfiniteGrid.ts","../src/grids/MasonryInfiniteGrid.ts","../src/grids/JustifiedInfiniteGrid.ts","../src/grids/FrameInfiniteGrid.ts","../src/grids/PackingInfiniteGrid.ts","../src/index.umd.ts"],"sourcesContent":["import { GRID_PROPERTY_TYPES } from \"@egjs/grid\";\n\nconst ua = typeof window !== \"undefined\" ? window.navigator.userAgent : \"\";\n\nexport const IS_IOS = /iPhone|iPad/.test(ua);\nexport const CONTAINER_CLASS_NAME = \"infinitegrid-container\";\nexport const IGNORE_PROPERITES_MAP = {\n  renderOnPropertyChange: true,\n  useFit: true,\n  autoResize: true,\n} as const;\n\n\nexport const INFINITEGRID_PROPERTY_TYPES = {\n  ...GRID_PROPERTY_TYPES,\n};\n\nexport const DIRECTION = {\n  START: \"start\",\n  END: \"end\",\n  NONE: \"\",\n} as const;\n\nexport const INFINITEGRID_EVENTS = {\n  CHANGE_SCROLL: \"changeScroll\",\n  REQUEST_APPEND: \"requestAppend\",\n  REQUEST_PREPEND: \"requestPrepend\",\n  RENDER_COMPLETE: \"renderComplete\",\n  CONTENT_ERROR: \"contentError\",\n} as const;\n\n// type?: ITEM_TYPE;\n// groupKey?: string | number;\n// key?: string | number;\n// element?: HTMLElement | null;\n// html?: string;\n// data?: Record<string, any>;\nexport const ITEM_INFO_PROPERTIES = {\n  type: true,\n  groupKey: true,\n  key: true,\n  element: true,\n  html: true,\n  data: true,\n};\n\n\nexport const INFINITEGRID_METHODS = [\n  \"insertByGroupIndex\",\n  \"updateItems\",\n  \"getItems\",\n  \"getVisibleItems\",\n  \"getGroups\",\n  \"getVisibleGroups\",\n  \"renderItems\",\n  \"getContainerElement\",\n  \"getScrollContainerElement\",\n  \"getWrapperElement\",\n  \"setStatus\",\n  \"getStatus\",\n  \"removePlaceholders\",\n  \"prependPlaceholders\",\n  \"appendPlaceholders\",\n  \"getStartCursor\",\n  \"getEndCursor\",\n  \"setCursors\",\n] as const;\n\n\nexport enum GROUP_TYPE {\n  NORMAL = 0,\n  VIRTUAL = 1,\n  LOADING = 2,\n}\n\nexport enum ITEM_TYPE {\n  NORMAL = 0,\n  VIRTUAL = 1,\n  LOADING = 2,\n}\n\nexport enum STATUS_TYPE {\n  // does not remove anything.\n  NOT_REMOVE = 0,\n  // Minimize information on invisible items\n  MINIMIZE_INVISIBLE_ITEMS = 1,\n  // Minimize information on invisible groups\n  MINIMIZE_INVISIBLE_GROUPS = 2,\n  // remove invisible groups\n  REMOVE_INVISIBLE_GROUPS = 3,\n}\n\n\nexport const INVISIBLE_POS = -9999;\n","import { GridItem, GridItemStatus, MOUNT_STATE } from \"@egjs/grid\";\nimport { INVISIBLE_POS, ITEM_TYPE } from \"./consts\";\nimport { InfiniteGridItemInfo } from \"./types\";\n\n\nexport interface InfiniteGridItemStatus extends GridItemStatus {\n  type?: ITEM_TYPE;\n  groupKey?: string | number;\n  key?: string | number;\n  html?: string;\n}\n\n/**\n * @extends Grid.GridItem\n */\nexport class InfiniteGridItem extends GridItem implements Required<InfiniteGridItemInfo> {\n  public groupKey: string | number;\n  public readonly html: string;\n  constructor(horizontal: boolean, itemStatus?: Partial<InfiniteGridItemStatus>) {\n    super(horizontal, {\n      html: \"\",\n      type: ITEM_TYPE.NORMAL,\n      cssRect: { top: INVISIBLE_POS, left: INVISIBLE_POS },\n      ...itemStatus,\n    } as GridItemStatus);\n\n    if (this.type === ITEM_TYPE.VIRTUAL) {\n      if (this.rect.width || this.rect.height) {\n        this.mountState = MOUNT_STATE.UNMOUNTED;\n      }\n      const orgRect = this.orgRect;\n      const rect = this.rect;\n      const cssRect = this.cssRect;\n\n      if (cssRect.width) {\n        rect.width = cssRect.width;\n      } else if (orgRect.width) {\n        rect.width = orgRect.width;\n      }\n      if (cssRect.height) {\n        rect.height = cssRect.height;\n      } else if (orgRect.height) {\n        rect.height = orgRect.height;\n      }\n    }\n  }\n  public getVirtualStatus(): Partial<InfiniteGridItemStatus> {\n    return {\n      type: ITEM_TYPE.VIRTUAL,\n      groupKey: this.groupKey,\n      key: this.key,\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      attributes: this.attributes,\n    };\n  }\n  public getMinimizedStatus(): Partial<InfiniteGridItemStatus> {\n    const status: Partial<InfiniteGridItemStatus> = {\n      ...super.getMinimizedStatus(),\n      type: ITEM_TYPE.NORMAL,\n      groupKey: this.groupKey,\n    };\n    if (this.html) {\n      status.html = this.html;\n    }\n    return status;\n  }\n}\n\nexport interface InfiniteGridItem extends Required<InfiniteGridItemStatus> {}\n","import Grid, { GridItem, GridOutlines } from \"@egjs/grid\";\nimport { ITEM_TYPE } from \"./consts\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\n\nexport const LOADING_GROUP_KEY = \"__INFINITEGRID__LOADING_GRID\";\nexport const LOADING_ITEM_KEY = \"__INFINITEGRID__LOADING_ITEM\";\n\nexport class LoadingGrid extends Grid {\n  public type: \"start\" | \"end\" | \"\" = \"\";\n  public getLoadingItem(): InfiniteGridItem | null {\n    return this.items[0] as InfiniteGridItem || null;\n  }\n  public setLoadingItem(item: Partial<InfiniteGridItemStatus> | null) {\n    if (item) {\n      const loadingItem = this.getLoadingItem();\n\n      if (!loadingItem) {\n        this.items = [new InfiniteGridItem(this.options.horizontal, {\n          ...item,\n          type: ITEM_TYPE.LOADING,\n          key: LOADING_ITEM_KEY,\n        })];\n      } else {\n        for (const name in item) {\n          loadingItem[name] = item[name];\n        }\n      }\n    } else {\n      this.items = [];\n    }\n  }\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    if (!items.length) {\n      return {\n        start: outline,\n        end: outline,\n      };\n    }\n    const nextOutline = outline.length ? [...outline] : [0];\n    const item = items[0];\n    const offset = item.contentSize + this.gap;\n\n    item.cssInlinePos = this.getContainerInlineSize() / 2 - item.inlineSize / 2;\n\n    if (direction === \"end\") {\n      const maxPos = Math.max(...nextOutline);\n\n      item.cssContentPos = maxPos;\n\n      return {\n        start: nextOutline,\n        end: nextOutline.map((pos) => pos + offset),\n      };\n    } else {\n      const minPos = Math.min(...nextOutline);\n\n      item.cssContentPos = minPos - offset;\n\n      return {\n        start: nextOutline.map((pos) => pos - offset),\n        end: nextOutline,\n      };\n    }\n  }\n}\n","import { withClassMethods } from \"@cfcs/core\";\nimport Grid, { GRID_PROPERTY_TYPES } from \"@egjs/grid\";\nimport { diff } from \"@egjs/list-differ\";\nimport { GROUP_TYPE, IGNORE_PROPERITES_MAP, INFINITEGRID_METHODS, ITEM_INFO_PROPERTIES, ITEM_TYPE } from \"./consts\";\nimport { GroupManagerStatus, InfiniteGridGroupStatus } from \"./GroupManager\";\nimport InfiniteGrid from \"./InfiniteGrid\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\nimport {\n  CategorizedGroup, InfiniteGridGroup, InfiniteGridInsertedItems,\n  InfiniteGridItemInfo,\n  RenderingOptions,\n} from \"./types\";\n\nexport function isWindow(el: Window | Element): el is Window {\n  return el === window;\n}\n\nexport function isNumber(val: any): val is number {\n  return typeof val === \"number\";\n}\n\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\n\nexport function flat<T>(arr: T[][]): T[] {\n  return arr.reduce((prev, cur) => {\n    return [...prev, ...cur];\n  }, []);\n}\nexport function splitOptions(options: Record<string, any>) {\n  const {\n    gridOptions,\n    ...otherOptions\n  } = options;\n\n  return {\n    ...splitGridOptions(gridOptions),\n    ...otherOptions,\n  };\n}\nexport function splitGridOptions(options: Record<string, any>) {\n  const nextOptions: Record<string, any> = {};\n  const gridOptions: Record<string, any> = {};\n  const defaultOptions = Grid.defaultOptions;\n\n  for (const name in options) {\n    const value = options[name];\n\n    if (!(name in IGNORE_PROPERITES_MAP)) {\n      gridOptions[name] = value;\n    }\n\n    if (name in defaultOptions) {\n      nextOptions[name] = value;\n    }\n  }\n  return {\n    ...nextOptions,\n    gridOptions,\n  };\n}\n\nexport function categorize<Item extends InfiniteGridItemInfo = InfiniteGridItem>(items: Item[]) {\n  const groups: Array<CategorizedGroup<Item>> = [];\n  const groupKeys: Record<string | number, CategorizedGroup<Item>> = {};\n  const registeredGroupKeys: Record<string | number, boolean> = {};\n\n  items.filter((item) => item.groupKey != null).forEach(({ groupKey }) => {\n    registeredGroupKeys[groupKey!] = true;\n  });\n\n  let generatedGroupKey: number | string;\n  let isContinuousGroupKey = false;\n\n  items.forEach((item) => {\n    if (item.groupKey != null) {\n      isContinuousGroupKey = false;\n    } else {\n      if (!isContinuousGroupKey) {\n        generatedGroupKey = makeKey(registeredGroupKeys);\n        isContinuousGroupKey = true;\n        registeredGroupKeys[generatedGroupKey] = true;\n      }\n      item.groupKey = generatedGroupKey;\n    }\n\n    const groupKey = item.groupKey;\n    let group = groupKeys[groupKey];\n\n    if (!group) {\n      group = {\n        groupKey,\n        items: [],\n      };\n      groupKeys[groupKey] = group;\n      groups.push(group);\n    }\n\n    group.items.push(item);\n  });\n  return groups;\n}\n\nexport function getNextCursors(\n  prevKeys: Array<string | number>,\n  nextKeys: Array<string | number>,\n  prevStartCursor: number,\n  prevEndCursor: number,\n) {\n  const result = diff(prevKeys, nextKeys, (key) => key);\n  let nextStartCursor = -1;\n  let nextEndCursor = -1;\n\n  // sync cursors\n  result.maintained.forEach(([prevIndex, nextIndex]) => {\n    if (prevStartCursor <= prevIndex && prevIndex <= prevEndCursor) {\n      if (nextStartCursor === -1) {\n        nextStartCursor = nextIndex;\n        nextEndCursor = nextIndex;\n      } else {\n        nextStartCursor = Math.min(nextStartCursor, nextIndex);\n        nextEndCursor = Math.max(nextEndCursor, nextIndex);\n      }\n    }\n  });\n  return {\n    startCursor: nextStartCursor,\n    endCursor: nextEndCursor,\n  };\n}\nexport function splitVirtualGroups<Group extends { type: GROUP_TYPE, groupKey: string | number }>(\n  groups: Group[],\n  direction: \"start\" | \"end\",\n  nextGroups: CategorizedGroup<InfiniteGridItemStatus>[],\n) {\n  let virtualGroups: Group[] = [];\n\n  if (direction === \"start\") {\n    const index = findIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n    if (index === -1) {\n      return [];\n    }\n    // Get the virtual group maintained in the group from the next group.\n    const endMaintainedIndex = findIndex(groups, (group) => {\n      return findIndex(nextGroups, (nextGroup) => nextGroup.groupKey === group.groupKey) >= 0;\n    });\n    const endIndex = endMaintainedIndex >= 0 ? Math.min(index, endMaintainedIndex) : index;\n\n    virtualGroups = groups.slice(0, endIndex);\n  } else {\n    const index = findLastIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n    if (index === -1) {\n      return [];\n    }\n    const startMaintainedIndex = findLastIndex(groups, (group) => {\n      return findIndex(nextGroups, (nextGroup) => nextGroup.groupKey === group.groupKey) >= 0;\n    });\n    const startIndex = startMaintainedIndex >= 0 ? Math.max(index, startMaintainedIndex) : index;\n\n    virtualGroups = groups.slice(startIndex + 1);\n  }\n\n  return virtualGroups;\n}\n\nexport function getFirstRenderingItems(\n  nextItems: InfiniteGridItemStatus[],\n  horizontal: boolean,\n) {\n  const groups = categorize(nextItems);\n\n  if (!groups[0]) {\n    return [];\n  }\n  return groups[0].items.map((item) => {\n    return new InfiniteGridItem(horizontal, {\n      ...item,\n    });\n  });\n}\nexport function getRenderingItemsByStatus(\n  groupManagerStatus: GroupManagerStatus,\n  nextItems: InfiniteGridItemStatus[],\n  usePlaceholder: boolean,\n  horizontal: boolean,\n) {\n  const prevGroups = groupManagerStatus.groups;\n  const groups = categorize(nextItems);\n\n  const startVirtualGroups = splitVirtualGroups(prevGroups, \"start\", groups);\n  const endVirtualGroups = splitVirtualGroups(prevGroups, \"end\", groups);\n  const nextGroups = [\n    ...startVirtualGroups,\n    ...groups,\n    ...endVirtualGroups,\n  ] as Array<InfiniteGridGroupStatus | CategorizedGroup<InfiniteGridItemStatus>>;\n  const {\n    startCursor,\n    endCursor,\n  } = getNextCursors(\n    prevGroups.map((group) => group.groupKey),\n    nextGroups.map((group) => group.groupKey),\n    groupManagerStatus.cursors[0],\n    groupManagerStatus.cursors[1],\n  );\n\n  let nextVisibleItems = flat(nextGroups.slice(startCursor, endCursor + 1).map((group) => {\n    return group.items.map((item) => {\n      return new InfiniteGridItem(horizontal, { ...item });\n    });\n  }));\n\n  if (!usePlaceholder) {\n    nextVisibleItems = nextVisibleItems.filter((item) => {\n      return item.type !== ITEM_TYPE.VIRTUAL;\n    });\n  }\n\n  return nextVisibleItems;\n}\n\nexport function mountRenderingItems(items: InfiniteGridItemInfo[], options: RenderingOptions) {\n  const {\n    grid,\n    usePlaceholder,\n    useLoading,\n    useFirstRender,\n    status,\n  } = options;\n  if (!grid) {\n    return;\n  }\n  if (usePlaceholder) {\n    grid.setPlaceholder({});\n  }\n  if (useLoading) {\n    grid.setLoading({});\n  }\n  if (status) {\n    grid.setStatus(status, true);\n  }\n\n  grid.syncItems(items);\n\n  if (useFirstRender && !status && grid.getGroups().length) {\n    grid.setCursors(0, 0, true);\n  }\n}\nexport function getRenderingItems(items: InfiniteGridItemInfo[], options: RenderingOptions) {\n  const {\n    status,\n    usePlaceholder,\n    useLoading,\n    horizontal,\n    useFirstRender,\n    grid,\n  } = options;\n  let visibleItems: InfiniteGridItem[] = [];\n\n  if (grid) {\n    grid.setPlaceholder(usePlaceholder ? {} : null);\n    grid.setLoading(useLoading ? {} : null);\n    grid.syncItems(items);\n\n    visibleItems = grid.getRenderingItems();\n  } else if (status) {\n    visibleItems = getRenderingItemsByStatus(status.groupManager, items, !!usePlaceholder, !!horizontal);\n  } else if (useFirstRender) {\n    visibleItems = getFirstRenderingItems(items, !!horizontal);\n  }\n\n  return visibleItems;\n}\n\n/* Class Decorator */\nexport function InfiniteGridGetterSetter(component: {\n  prototype: InfiniteGrid<any>,\n  propertyTypes: typeof GRID_PROPERTY_TYPES,\n}) {\n  const {\n    prototype,\n    propertyTypes,\n  } = component;\n  for (const name in propertyTypes) {\n    const attributes: Record<string, any> = {\n      enumerable: true,\n      configurable: true,\n      get(this: InfiniteGrid) {\n        const options = this.groupManager.options;\n        if (name in options) {\n          return options[name];\n        } else {\n          return options.gridOptions[name];\n        }\n      },\n      set(this: InfiniteGrid, value: any) {\n        const prevValue = this.groupManager[name];\n\n        if (prevValue === value) {\n          return;\n        }\n        this.groupManager.gridOptions = {\n          [name]: value,\n        };\n      },\n    };\n    Object.defineProperty(prototype, name, attributes);\n  }\n}\n\nexport function makeKey(\n  registeredKeys: Record<string, any>,\n  prefix = \"\",\n) {\n  let index = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const key = `infinitegrid_${prefix}${index++}`;\n\n    if (!(key in registeredKeys)) {\n      return key;\n    }\n  }\n}\n\nexport function convertHTMLtoElement(html: string) {\n  const dummy = document.createElement(\"div\");\n\n  dummy.innerHTML = html;\n  return toArray(dummy.children);\n}\n\nexport function convertInsertedItems(\n  items: InfiniteGridInsertedItems,\n  groupKey?: string | number,\n): InfiniteGridItemInfo[] {\n  let insertedItems: Array<string | HTMLElement | InfiniteGridItemInfo>;\n\n  if (isString(items)) {\n    insertedItems = convertHTMLtoElement(items);\n  } else {\n    insertedItems = items;\n  }\n  return insertedItems.map((item) => {\n    let element!: HTMLElement;\n    let html = \"\";\n    let key!: string | number;\n\n    if (isString(item)) {\n      html = item;\n    } else if (\"parentNode\" in item) {\n      element = item;\n      html = item.outerHTML;\n    } else {\n      return { groupKey, ...item };\n    }\n\n    return {\n      key,\n      groupKey,\n      html,\n      element,\n    };\n  });\n}\nexport function toArray(nodes: HTMLCollection): HTMLElement[];\nexport function toArray<T>(nodes: { length: number, [key: number]: T }): T[];\nexport function toArray<T>(nodes: { length: number, [key: number]: T }): T[] {\n  const array: T[] = [];\n\n  if (nodes) {\n    const length = nodes.length;\n\n    for (let i = 0; i < length; i++) {\n      array.push(nodes[i]);\n    }\n  }\n  return array;\n}\n\n\nexport function find<T>(arr: T[], callback: (value: T, index: number) => boolean): T | null {\n  const length = arr.length;\n\n  for (let i = 0; i < length; ++i) {\n    const value = arr[i];\n\n    if (callback(value, i)) {\n      return value;\n    }\n  }\n\n  return null;\n}\n\nexport function findIndex<T>(arr: T[], callback: (value: T, index: number) => boolean) {\n  const length = arr.length;\n  for (let i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nexport function findLastIndex<T>(arr: T[], callback: (value: T, index: number) => boolean) {\n  const length = arr.length;\n  for (let i = length - 1; i >= 0; --i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nexport function getItemInfo(info: InfiniteGridItemInfo) {\n  const nextInfo: InfiniteGridItemInfo = {};\n\n  for (const name in info) {\n    if (name in ITEM_INFO_PROPERTIES) {\n      nextInfo[name] = info[name];\n    }\n  }\n\n  return nextInfo;\n}\n\nexport function setPlaceholder(item: InfiniteGridItem, info: InfiniteGridItemStatus) {\n  for (const name in info) {\n    const value = info[name];\n\n    if (isObject(value)) {\n      item[name] = {\n        ...item[name],\n        ...value,\n      };\n    } else {\n      item[name] = info[name];\n    }\n  }\n}\n\nexport function isFlatOutline(start: number[], end: number[]) {\n  return start.length === end.length && start.every((pos, i) => end[i] === pos);\n}\n\nexport function range(length: number): number[] {\n  const arr: number[] = [];\n  for (let i = 0; i < length; ++i) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function flatGroups(groups: InfiniteGridGroup[]) {\n  return flat(groups.map(({ grid }) => grid.getItems() as InfiniteGridItem[]));\n}\n\n\nexport function filterVirtuals<T extends InfiniteGridItem | InfiniteGridGroup>(\n  items: T[],\n  includePlaceholders?: boolean\n): T[] {\n  if (includePlaceholders) {\n    return [...items];\n  } else {\n    return items.filter((item) => item.type !== ITEM_TYPE.VIRTUAL);\n  }\n}\n\n/**\n * Decorator that makes the method of InfiniteGrid available in the framework.\n * @ko 프레임워크에서 InfiniteGrid의 메소드를 사용할 수 있게 하는 데코레이터.\n * @private\n * @example\n * ```js\n * import { withInfiniteGridMethods } from \"@egjs/infinitegrid\";\n *\n * class Grid extends React.Component<Partial<InfiniteGridProps & InfiniteGridOptions>> {\n *   &#64;withInfiniteGridMethods\n *   private grid: NativeGrid;\n * }\n * ```\n */\nexport const withInfiniteGridMethods = withClassMethods(INFINITEGRID_METHODS);\n\n","import Grid, {\n  GetterSetter,\n  GridFunction, GridOptions,\n  GridOutlines, MOUNT_STATE, Properties, PROPERTY_TYPE,\n  RenderOptions, UPDATE_STATE,\n} from \"@egjs/grid\";\nimport { GROUP_TYPE, ITEM_TYPE, STATUS_TYPE } from \"./consts\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\nimport { LoadingGrid, LOADING_GROUP_KEY } from \"./LoadingGrid\";\nimport { CategorizedGroup, InfiniteGridGroup, InfiniteGridItemInfo } from \"./types\";\nimport {\n  categorize, filterVirtuals, findIndex, findLastIndex,\n  flat,\n  flatGroups, getItemInfo, isNumber, makeKey,\n  range,\n  setPlaceholder,\n  splitGridOptions, splitOptions, splitVirtualGroups,\n} from \"./utils\";\n\nexport interface InfiniteGridGroupStatus {\n  type: GROUP_TYPE;\n  groupKey: string | number;\n  items: InfiniteGridItemStatus[];\n  outlines: GridOutlines;\n}\n\nexport interface GroupManagerOptions extends GridOptions {\n  gridConstructor: GridFunction | null;\n  gridOptions: Record<string, any>;\n}\n\nexport interface GroupManagerStatus {\n  cursors: [number, number];\n  orgCursors: [number, number];\n  itemCursors: [number, number];\n  startGroupKey: number | string;\n  endGroupKey: number | string;\n  groups: InfiniteGridGroupStatus[];\n  outlines: GridOutlines;\n}\n\n@GetterSetter\nexport class GroupManager extends Grid<GroupManagerOptions> {\n  public static defaultOptions: Required<GroupManagerOptions> = {\n    ...Grid.defaultOptions,\n    gridConstructor: null,\n    gridOptions: {},\n  };\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    gridConstructor: PROPERTY_TYPE.PROPERTY,\n    gridOptions: PROPERTY_TYPE.PROPERTY,\n  } as const;\n  protected items: InfiniteGridItem[];\n  protected groupItems: InfiniteGridItem[] = [];\n  protected groups: InfiniteGridGroup[] = [];\n  protected itemKeys: Record<string | number, InfiniteGridItem> = {};\n  protected groupKeys: Record<string | number, InfiniteGridGroup> = {};\n  protected startCursor = 0;\n  protected endCursor = 0;\n  private _placeholder: Partial<InfiniteGridItemStatus> | null = null;\n  private _loadingGrid!: LoadingGrid;\n  private _mainGrid!: Grid;\n\n  constructor(container: HTMLElement, options: GroupManagerOptions) {\n    super(container, splitOptions(options));\n\n    this._loadingGrid = new LoadingGrid(container, {\n      externalContainerManager: this.containerManager,\n      useFit: false,\n      autoResize: false,\n      renderOnPropertyChange: false,\n      gap: this.gap,\n    });\n    this._mainGrid = this._makeGrid();\n  }\n  public set gridOptions(options: Record<string, any>) {\n    const {\n      gridOptions,\n      ...otherOptions\n    } = splitGridOptions(options);\n\n    const shouldRender = this._checkShouldRender(options);\n    this.options.gridOptions = {\n      ...this.options.gridOptions,\n      ...gridOptions,\n    };\n    [this._mainGrid, ...this.groups.map(({ grid }) => grid)].forEach((grid) => {\n      for (const name in options) {\n        (grid as any)[name] = options[name];\n      }\n    });\n    for (const name in otherOptions) {\n      this[name] = otherOptions[name];\n    }\n\n    this._loadingGrid.gap = this.gap;\n    if (shouldRender) {\n      this.scheduleRender();\n    }\n  }\n\n  public getItemByKey(key: string | number): InfiniteGridItem | null {\n    return this.itemKeys[key] || null;\n  }\n\n  public getGroupItems(includePlaceholders?: boolean) {\n    return filterVirtuals(this.groupItems, includePlaceholders);\n  }\n  public getVisibleItems(includePlaceholders?: boolean) {\n    return filterVirtuals(this.items, includePlaceholders);\n  }\n\n  public getRenderingItems() {\n    if (this.hasPlaceholder()) {\n      return this.items;\n    } else {\n      return this.items.filter((item) => item.type !== ITEM_TYPE.VIRTUAL);\n    }\n  }\n\n  public getGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    return filterVirtuals(this.groups, includePlaceholders);\n  }\n\n  public hasVisibleVirtualGroups() {\n    return this.getVisibleGroups(true).some((group) => group.type === GROUP_TYPE.VIRTUAL);\n  }\n  public hasPlaceholder() {\n    return !!this._placeholder;\n  }\n  public hasLoadingItem() {\n    return !!this._getLoadingItem();\n  }\n\n  public updateItems(items = this.groupItems, options?: RenderOptions) {\n    return super.updateItems(items, options);\n  }\n  public setPlaceholder(placeholder: Partial<InfiniteGridItemStatus> | null) {\n    this._placeholder = placeholder;\n    this._updatePlaceholder();\n  }\n\n  public getLoadingType() {\n    return this._loadingGrid.type;\n  }\n\n  public startLoading(type: \"start\" | \"end\") {\n    this._loadingGrid.type = type;\n    this.items = this._getRenderingItems();\n\n    return true;\n  }\n\n  public endLoading() {\n    const prevType = this._loadingGrid.type;\n\n    this._loadingGrid.type = \"\";\n    this.items = this._getRenderingItems();\n    return !!prevType;\n  }\n\n  public setLoading(loading: Partial<InfiniteGridItemStatus> | null) {\n    this._loadingGrid.setLoadingItem(loading);\n    this.items = this._getRenderingItems();\n  }\n\n  public getVisibleGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    const groups = this.groups.slice(this.startCursor, this.endCursor + 1);\n\n    return filterVirtuals(groups, includePlaceholders);\n  }\n\n  public getComputedOutlineLength(items = this.items) {\n    return this._mainGrid.getComputedOutlineLength(items);\n  }\n  public getComputedOutlineSize(items = this.items) {\n    return this._mainGrid.getComputedOutlineSize(items);\n  }\n\n  public applyGrid(items: InfiniteGridItem[], direction: \"end\" | \"start\", outline: number[]): GridOutlines {\n    const renderingGroups = this.groups.slice();\n\n    if (!renderingGroups.length) {\n      return {\n        start: [],\n        end: [],\n      };\n    }\n\n\n    const loadingGrid = this._loadingGrid;\n\n    if (loadingGrid.getLoadingItem()) {\n      if (loadingGrid.type === \"start\") {\n        renderingGroups.unshift(this._getLoadingGroup());\n      } else if (loadingGrid.type === \"end\") {\n        renderingGroups.push(this._getLoadingGroup());\n      }\n    }\n\n    const groups = renderingGroups.slice();\n\n    let nextOutline = outline;\n\n    if (direction === \"start\") {\n      groups.reverse();\n    }\n\n    const groupItems = this.groupItems;\n    const outlineLength = this.getComputedOutlineLength(groupItems);\n    const outlineSize = this.getComputedOutlineSize(groupItems);\n\n    groups.forEach((group) => {\n      const grid = group.grid;\n      const gridItems = grid.getItems();\n      const isVirtual = group.type === GROUP_TYPE.VIRTUAL && !gridItems[0];\n      const appliedItems = gridItems.filter((item) => item.mountState !== MOUNT_STATE.UNCHECKED && item.rect.width);\n      let gridOutlines: GridOutlines;\n\n      grid.outlineLength = outlineLength;\n      grid.outlineSize = outlineSize;\n\n      if (isVirtual) {\n        gridOutlines = this._applyVirtualGrid(grid, direction, nextOutline);\n      } else if (appliedItems.length) {\n        gridOutlines = grid.applyGrid(appliedItems, direction, nextOutline);\n      } else {\n        gridOutlines = {\n          start: [...nextOutline],\n          end: [...nextOutline],\n        };\n      }\n      grid.setOutlines(gridOutlines);\n      nextOutline = gridOutlines[direction];\n    });\n\n    return {\n      start: renderingGroups[0].grid.getOutlines().start,\n      end: renderingGroups[renderingGroups.length - 1].grid.getOutlines().end,\n    };\n  }\n\n  public syncItems(nextItemInfos: InfiniteGridItemInfo[]) {\n    const prevItemKeys = this.itemKeys;\n\n    this.itemKeys = {};\n    const nextItems = this._syncItemInfos(nextItemInfos.map((info) => getItemInfo(info)), prevItemKeys);\n    const prevGroupKeys = this.groupKeys;\n    let nextManagerGroups = categorize(nextItems);\n\n    const startVirtualGroups = this._splitVirtualGroups(\"start\", nextManagerGroups);\n    const endVirtualGroups = this._splitVirtualGroups(\"end\", nextManagerGroups);\n    nextManagerGroups = [...startVirtualGroups, ...this._mergeVirtualGroups(nextManagerGroups), ...endVirtualGroups];\n\n    const nextGroups: InfiniteGridGroup[] = nextManagerGroups.map(({ groupKey, items }) => {\n      const isVirtual = !items[0] || items[0].type === ITEM_TYPE.VIRTUAL;\n      const grid = prevGroupKeys[groupKey]?.grid ?? this._makeGrid();\n      const gridItems = isVirtual ? items : items.filter(({ type }) => type === ITEM_TYPE.NORMAL);\n\n      grid.setItems(gridItems);\n\n      return {\n        type: isVirtual ? GROUP_TYPE.VIRTUAL : GROUP_TYPE.NORMAL,\n        groupKey,\n        grid,\n        items: gridItems,\n        renderItems: items,\n      };\n    });\n\n    this._registerGroups(nextGroups);\n  }\n\n  public renderItems(options: RenderOptions = {}) {\n    if (options.useResize) {\n      this.groupItems.forEach((item) => {\n        item.updateState = UPDATE_STATE.NEED_UPDATE;\n      });\n      const loadingItem = this._getLoadingItem();\n\n      if (loadingItem) {\n        loadingItem.updateState = UPDATE_STATE.NEED_UPDATE;\n      }\n    }\n    return super.renderItems(options);\n  }\n\n  public setCursors(startCursor: number, endCursor: number) {\n    this.startCursor = startCursor;\n    this.endCursor = endCursor;\n    this.items = this._getRenderingItems();\n  }\n\n  public getStartCursor() {\n    return this.startCursor;\n  }\n\n  public getEndCursor() {\n    return this.endCursor;\n  }\n\n  public getGroupStatus(type?: STATUS_TYPE, includePlaceholders?: boolean): GroupManagerStatus {\n    const orgStartCursor = this.startCursor;\n    const orgEndCursor = this.endCursor;\n    const orgGroups = this.groups;\n    const startGroup = orgGroups[orgStartCursor];\n    const endGroup = orgGroups[orgEndCursor];\n\n    let startCursor = orgStartCursor;\n    let endCursor = orgEndCursor;\n\n    const isMinimizeItems = type === STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS;\n    const isMinimizeGroups = type === STATUS_TYPE.MINIMIZE_INVISIBLE_GROUPS;\n    let groups: InfiniteGridGroup[];\n\n    if (type === STATUS_TYPE.REMOVE_INVISIBLE_GROUPS) {\n      groups = this.getVisibleGroups(includePlaceholders);\n      endCursor = groups.length - 1;\n      startCursor = 0;\n    } else {\n      groups = this.getGroups(includePlaceholders);\n\n      if (!includePlaceholders) {\n        startCursor = -1;\n        endCursor = -1;\n\n        for (let orgIndex = orgStartCursor; orgIndex <= orgEndCursor; ++orgIndex) {\n          const orgGroup = orgGroups[orgIndex];\n\n          if (orgGroup && orgGroup.type !== GROUP_TYPE.VIRTUAL) {\n            startCursor = groups.indexOf(orgGroup);\n            break;\n          }\n        }\n        for (let orgIndex = orgEndCursor; orgIndex >= orgStartCursor; --orgIndex) {\n          const orgGroup = orgGroups[orgIndex];\n\n          if (orgGroup && orgGroup.type !== GROUP_TYPE.VIRTUAL) {\n            endCursor = groups.lastIndexOf(orgGroup);\n            break;\n          }\n        }\n      }\n    }\n\n    const groupStatus: InfiniteGridGroupStatus[] = groups.map(({ grid, groupKey }, i) => {\n      const isOutsideCursor = i < startCursor || endCursor < i;\n      const isVirtualItems = isMinimizeItems && isOutsideCursor;\n      const isVirtualGroup = isMinimizeGroups && isOutsideCursor;\n      const gridItems = grid.getItems() as InfiniteGridItem[];\n      const items = isVirtualGroup\n        ? []\n        : gridItems.map((item) => isVirtualItems ? item.getVirtualStatus() : item.getMinimizedStatus());\n\n      return {\n        type: isVirtualGroup || isVirtualItems ? GROUP_TYPE.VIRTUAL : GROUP_TYPE.NORMAL,\n        groupKey: groupKey,\n        outlines: grid.getOutlines(),\n        items,\n      };\n    });\n\n\n    const totalItems = this.getGroupItems();\n\n    const itemStartCursor = totalItems.indexOf(startGroup?.items[0]);\n    const itemEndCursor = totalItems.indexOf(endGroup?.items.slice().reverse()[0]);\n\n    return {\n      cursors: [startCursor, endCursor],\n      orgCursors: [orgStartCursor, orgEndCursor],\n      itemCursors: [itemStartCursor, itemEndCursor],\n      startGroupKey: startGroup?.groupKey,\n      endGroupKey: endGroup?.groupKey,\n      groups: groupStatus,\n      outlines: this.outlines,\n    };\n  }\n  protected fitOutlines(useFit = this.useFit) {\n    const groups = this.groups;\n    const firstGroup = groups[0];\n\n    if (!firstGroup) {\n      return;\n    }\n    const outlines = firstGroup.grid.getOutlines();\n    const startOutline = outlines.start;\n    const outlineOffset = startOutline.length ? Math.min(...startOutline) : 0;\n\n    // If the outline is less than 0, a fit occurs forcibly.\n    if (!useFit && outlineOffset > 0) {\n      return;\n    }\n\n    groups.forEach(({ grid }) => {\n      const { start, end } = grid.getOutlines();\n\n      grid.setOutlines({\n        start: start.map((point) => point - outlineOffset),\n        end: end.map((point) => point - outlineOffset),\n      });\n    });\n\n    this.groupItems.forEach((item) => {\n      const contentPos = item.cssContentPos;\n\n      if (!isNumber(contentPos)) {\n        return;\n      }\n      item.cssContentPos = contentPos - outlineOffset;\n    });\n  }\n  public setGroupStatus(status: GroupManagerStatus) {\n    this.itemKeys = {};\n    this.groupItems = [];\n    this.items = [];\n    const prevGroupKeys = this.groupKeys;\n\n    const nextGroups: InfiniteGridGroup[] = status.groups.map(({\n      type,\n      groupKey,\n      items,\n      outlines,\n    }) => {\n      const nextItems = this._syncItemInfos(items);\n      const grid = prevGroupKeys[groupKey]?.grid ?? this._makeGrid();\n\n      grid.setOutlines(outlines);\n      grid.setItems(nextItems);\n\n      return {\n        type,\n        groupKey,\n        grid,\n        items: nextItems,\n        renderItems: nextItems,\n      };\n    });\n\n    this.setOutlines(status.outlines);\n    this._registerGroups(nextGroups);\n    this._updatePlaceholder();\n    this.setCursors(status.cursors[0], status.cursors[1]);\n  }\n  public appendPlaceholders(items: number | InfiniteGridItemStatus[], groupKey?: string | number) {\n    return this.insertPlaceholders(\"end\", items, groupKey);\n  }\n  public prependPlaceholders(items: number | InfiniteGridItemStatus[], groupKey?: string | number) {\n    return this.insertPlaceholders(\"start\", items, groupKey);\n  }\n  public removePlaceholders(type: \"start\" | \"end\" | { groupKey: string | number }) {\n    const groups = this.groups;\n    const length = groups.length;\n\n    if (type === \"start\") {\n      const index = findIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n      groups.splice(0, index);\n\n    } else if (type === \"end\") {\n      const index = findLastIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n      groups.splice(index + 1, length - index - 1);\n    } else {\n      const groupKey = type.groupKey;\n\n      const index = findIndex(groups, (group) => group.groupKey === groupKey);\n\n      if (index > -1) {\n        groups.splice(index, 1);\n      }\n    }\n\n    this.syncItems(flatGroups(this.getGroups()));\n  }\n  public insertPlaceholders(\n    direction: \"start\" | \"end\",\n    items: number | InfiniteGridItemStatus[],\n    groupKey: string | number = makeKey(this.groupKeys, \"virtual_\"),\n  ) {\n\n    let infos: InfiniteGridItemInfo[] = [];\n\n    if (isNumber(items)) {\n      infos = range(items).map(() => ({ type: ITEM_TYPE.VIRTUAL, groupKey }));\n    } else if (Array.isArray(items)) {\n      infos = items.map((status) => ({\n        groupKey,\n        ...status,\n        type: ITEM_TYPE.VIRTUAL,\n      }));\n    }\n    const grid = this._makeGrid();\n    const nextItems = this._syncItemInfos(infos, this.itemKeys);\n\n    this._updatePlaceholder(nextItems);\n    grid.setItems(nextItems);\n\n    const group = {\n      type: GROUP_TYPE.VIRTUAL,\n      groupKey,\n      grid,\n      items: nextItems,\n      renderItems: nextItems,\n    };\n\n    this.groupKeys[groupKey] = group;\n\n    if (direction === \"end\") {\n      this.groups.push(group);\n      this.groupItems.push(...nextItems);\n    } else {\n      this.groups.splice(0, 0, group);\n      this.groupItems.splice(0, 0, ...nextItems);\n      if (this.startCursor > -1) {\n        ++this.startCursor;\n        ++this.endCursor;\n      }\n    }\n\n\n    return {\n      group,\n      items: nextItems,\n    };\n  }\n\n  public shouldRerenderItems() {\n    let isRerender = false;\n\n    this.getVisibleGroups().forEach((group) => {\n      const items = group.items;\n\n      if (\n        items.length === group.renderItems.length\n        || items.every((item) => item.mountState === MOUNT_STATE.UNCHECKED)\n      ) {\n        return;\n      }\n      isRerender = true;\n      group.renderItems = [...items];\n    });\n    if (isRerender) {\n      this.items = this._getRenderingItems();\n    }\n    return isRerender;\n  }\n\n  private _getGroupItems() {\n    return flatGroups(this.getGroups(true));\n  }\n\n  private _getRenderingItems() {\n    const items = flat(this.getVisibleGroups(true).map((item) => item.renderItems));\n\n\n    const loadingGrid = this._loadingGrid;\n    const loadingItem = loadingGrid.getLoadingItem();\n\n    if (loadingItem) {\n      if (loadingGrid.type === \"end\") {\n        items.push(loadingItem);\n      } else if (loadingGrid.type === \"start\") {\n        items.unshift(loadingItem);\n      }\n    }\n\n    return items;\n  }\n\n  private _checkShouldRender(options: Record<string, any>) {\n    const GridConstructor = this.options.gridConstructor!;\n    const prevOptions = this.gridOptions;\n    const propertyTypes = GridConstructor.propertyTypes;\n\n    for (const name in prevOptions) {\n      if (!(name in options) && propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY) {\n        return true;\n      }\n    }\n    for (const name in options) {\n      if (prevOptions[name] !== options[name] && propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY) {\n        return true;\n      }\n    }\n    return false;\n  }\n  private _applyVirtualGrid(grid: Grid, direction: \"start\" | \"end\", outline: number[]) {\n    const startOutline = outline.length ? [...outline] : [0];\n    const prevOutlines = grid.getOutlines();\n    const prevOutline = prevOutlines[direction === \"end\" ? \"start\" : \"end\"];\n\n    if (\n      prevOutline.length !== startOutline.length\n      || prevOutline.some((value, i) => value !== startOutline[i])\n    ) {\n      return {\n        start: [...startOutline],\n        end: [...startOutline],\n      };\n    }\n    return prevOutlines;\n  }\n  private _syncItemInfos(\n    nextItemInfos: InfiniteGridItemStatus[],\n    prevItemKeys: Record<string | number, InfiniteGridItem> = {},\n  ) {\n    const horizontal = this.options.horizontal;\n    const nextItemKeys = this.itemKeys;\n\n    nextItemInfos.filter((info) => info.key != null).forEach((info) => {\n      const key = info.key!;\n      const prevItem = prevItemKeys[key];\n\n      if (!prevItem) {\n        nextItemKeys[key] = new InfiniteGridItem(horizontal, {\n          ...info,\n        });\n      } else if (prevItem.type === ITEM_TYPE.VIRTUAL && info.type !== ITEM_TYPE.VIRTUAL) {\n        nextItemKeys[key] = new InfiniteGridItem(horizontal, {\n          orgRect: prevItem.orgRect,\n          rect: prevItem.rect,\n          ...info,\n        });\n      } else {\n        if (info.data) {\n          prevItem.data = info.data;\n        }\n        if (info.groupKey != null) {\n          prevItem.groupKey = info.groupKey!;\n        }\n        nextItemKeys[key] = prevItem;\n      }\n    });\n    const nextItems = nextItemInfos.map((info) => {\n      let key = info.key!;\n\n      if (info.key == null) {\n        key = makeKey(nextItemKeys, info.type === ITEM_TYPE.VIRTUAL ? \"virtual_\" : \"\");\n      }\n      let item = nextItemKeys[key];\n\n      if (!item) {\n        const prevItem = prevItemKeys[key];\n\n        if (prevItem) {\n          item = prevItem;\n\n          if (info.data) {\n            item.data = info.data;\n          }\n        } else {\n          item = new InfiniteGridItem(horizontal, {\n            ...info,\n            key,\n          });\n        }\n        nextItemKeys[key] = item;\n      }\n      return item;\n    });\n    return nextItems;\n  }\n  private _registerGroups(groups: InfiniteGridGroup[]) {\n    const nextGroupKeys: Record<string | number, InfiniteGridGroup> = {};\n\n    groups.forEach((group) => {\n      nextGroupKeys[group.groupKey] = group;\n    });\n\n    this.groups = groups;\n    this.groupKeys = nextGroupKeys;\n    this.groupItems = this._getGroupItems();\n  }\n  private _splitVirtualGroups(direction: \"start\" | \"end\", nextGroups: CategorizedGroup[]) {\n    const groups = splitVirtualGroups(this.groups, direction, nextGroups);\n    const itemKeys = this.itemKeys;\n\n    groups.forEach(({ renderItems }) => {\n      renderItems.forEach((item) => {\n        itemKeys[item.key] = item;\n      });\n    });\n\n    return groups;\n  }\n  private _mergeVirtualGroups(groups: Array<CategorizedGroup<InfiniteGridItem>>) {\n    const itemKeys = this.itemKeys;\n    const groupKeys = this.groupKeys;\n\n    groups.forEach((group) => {\n      const prevGroup = groupKeys[group.groupKey];\n\n      if (!prevGroup) {\n        return;\n      }\n      const items = group.items;\n\n      if (items.every((item) => item.mountState === MOUNT_STATE.UNCHECKED)) {\n        prevGroup.renderItems.forEach((item) => {\n          if (item.type === ITEM_TYPE.VIRTUAL && !itemKeys[item.key]) {\n            items.push(item);\n            itemKeys[item.key] = item;\n          }\n        });\n      }\n    });\n    return groups;\n  }\n\n  private _updatePlaceholder(items = this.groupItems) {\n    const placeholder = this._placeholder;\n\n    if (!placeholder) {\n      return;\n    }\n\n    items.filter((item) => item.type === ITEM_TYPE.VIRTUAL).forEach((item) => {\n      setPlaceholder(item, placeholder);\n    });\n  }\n  private _makeGrid() {\n    const GridConstructor = this.options.gridConstructor!;\n    const gridOptions = this.gridOptions;\n    const container = this.containerElement;\n\n    return new GridConstructor(container, {\n      ...gridOptions,\n      useFit: false,\n      autoResize: false,\n      useResizeObserver: false,\n      observeChildren: false,\n      renderOnPropertyChange: false,\n      externalContainerManager: this.containerManager,\n      externalItemRenderer: this.itemRenderer,\n    });\n  }\n  private _getLoadingGroup(): InfiniteGridGroup {\n    const loadingGrid = this._loadingGrid;\n    const items = loadingGrid.getItems() as InfiniteGridItem[];\n\n    return {\n      groupKey: LOADING_GROUP_KEY,\n      type: GROUP_TYPE.NORMAL,\n      grid: loadingGrid,\n      items,\n      renderItems: items,\n    };\n  }\n  private _getLoadingItem() {\n    return this._loadingGrid.getLoadingItem();\n  }\n}\n\nexport interface GroupManager extends Properties<typeof GroupManager> {\n  getItems(): InfiniteGridItem[];\n}\n","import Component from \"@egjs/component\";\nimport { diff } from \"@egjs/list-differ\";\nimport { DIRECTION } from \"./consts\";\nimport { findIndex, findLastIndex, getNextCursors, isFlatOutline } from \"./utils\";\n\nexport interface OnInfiniteRequestAppend {\n  key?: string | number | undefined;\n  nextKey?: string | number | undefined;\n  nextKeys?: Array<string | number>;\n  isVirtual: boolean;\n}\n\nexport interface OnInfiniteRequestPrepend {\n  key?: string | number;\n  nextKey?: string | number;\n  nextKeys?: Array<string | number>;\n  isVirtual: boolean;\n}\n\nexport interface OnInfiniteChange {\n  prevStartCursor: number;\n  prevEndCursor: number;\n  nextStartCursor: number;\n  nextEndCursor: number;\n}\n\nexport interface InfiniteEvents {\n  requestAppend: OnInfiniteRequestAppend;\n  requestPrepend: OnInfiniteRequestPrepend;\n  change: OnInfiniteChange;\n}\n\nexport interface InfiniteOptions {\n  useRecycle?: boolean;\n  threshold?: number;\n  defaultDirection?: \"start\" | \"end\";\n}\n\nexport interface InfiniteItem {\n  key: string | number;\n  startOutline: number[];\n  endOutline: number[];\n  isVirtual?: boolean;\n}\n\nexport class Infinite extends Component<InfiniteEvents> {\n  public options: Required<InfiniteOptions>;\n  protected startCursor = -1;\n  protected endCursor = -1;\n  protected size = 0;\n  protected items: InfiniteItem[] = [];\n  protected itemKeys: Record<string | number, InfiniteItem> = {};\n  constructor(options: InfiniteOptions) {\n    super();\n    this.options = {\n      threshold: 0,\n      useRecycle: true,\n      defaultDirection: \"end\",\n      ...options,\n    };\n  }\n  public scroll(scrollPos: number) {\n    const prevStartCursor = this.startCursor;\n    const prevEndCursor = this.endCursor;\n    const items = this.items;\n    const length = items.length;\n    const size = this.size;\n    const {\n      defaultDirection,\n      threshold,\n      useRecycle,\n    } = this.options;\n    const isDirectionEnd = defaultDirection === \"end\";\n\n    if (!length) {\n      this.trigger(isDirectionEnd ? \"requestAppend\" : \"requestPrepend\", {\n        key: undefined,\n        isVirtual: false,\n      });\n      return;\n    } else if (prevStartCursor === -1 || prevEndCursor === -1) {\n      const nextCursor = isDirectionEnd ? 0 : length - 1;\n      this.trigger(\"change\", {\n        prevStartCursor,\n        prevEndCursor,\n        nextStartCursor: nextCursor,\n        nextEndCursor: nextCursor,\n      });\n      return;\n    }\n\n    const endScrollPos = scrollPos + size;\n    const startEdgePos = Math.max(...items[prevStartCursor].startOutline);\n    const endEdgePos = Math.min(...items[prevEndCursor].endOutline);\n    const visibles = items.map((item) => {\n      const {\n        startOutline,\n        endOutline,\n      } = item;\n\n      if (!startOutline.length || !endOutline.length) {\n        return false;\n      }\n      const startPos = Math.min(...startOutline);\n      const endPos = Math.max(...endOutline);\n\n      if (startPos - threshold <= endScrollPos && scrollPos <= endPos + threshold) {\n        return true;\n      }\n      return false;\n    });\n    const hasStartItems = 0 < prevStartCursor;\n    const hasEndItems = prevEndCursor < length - 1;\n    const isStart = scrollPos <= startEdgePos + threshold;\n    const isEnd = endScrollPos >= endEdgePos - threshold;\n    let nextStartCursor = visibles.indexOf(true);\n    let nextEndCursor = visibles.lastIndexOf(true);\n\n    if (nextStartCursor === -1) {\n      nextStartCursor = prevStartCursor;\n      nextEndCursor = prevEndCursor;\n    }\n\n    if (!useRecycle) {\n      nextStartCursor = Math.min(nextStartCursor, prevStartCursor);\n      nextEndCursor = Math.max(nextEndCursor, prevEndCursor);\n    }\n    if (nextStartCursor === prevStartCursor && hasStartItems && isStart) {\n      nextStartCursor -= 1;\n    }\n    if (nextEndCursor === prevEndCursor && hasEndItems && isEnd) {\n      nextEndCursor += 1;\n    }\n    let nextVisibleItems = items.slice(nextStartCursor, nextEndCursor + 1);\n\n    // It must contain no virtual items.\n    if (nextVisibleItems.every((item) => item.isVirtual === true)) {\n      // The real item can be in either the start or end direction.\n      let hasRealItem = false;\n\n      for (let i = nextStartCursor - 1; i >= 0; --i) {\n        if (!items[i].isVirtual) {\n          nextStartCursor = i;\n          hasRealItem = true;\n          break;\n        }\n      }\n      if (!hasRealItem) {\n        for (let i = nextEndCursor + 1; i < length; ++i) {\n          if (!items[i].isVirtual) {\n            nextEndCursor = i;\n            hasRealItem = true;\n            break;\n          }\n        }\n      }\n      if (hasRealItem) {\n        nextVisibleItems = items.slice(nextStartCursor, nextEndCursor + 1);\n      }\n    }\n\n    const hasVirtualItems = nextVisibleItems.some((item) => item.isVirtual === true);\n\n    if (prevStartCursor !== nextStartCursor || prevEndCursor !== nextEndCursor) {\n      this.trigger(\"change\", {\n        prevStartCursor,\n        prevEndCursor,\n        nextStartCursor,\n        nextEndCursor,\n      });\n\n      if (!hasVirtualItems) {\n        return;\n      }\n    }\n\n    // If a virtual item is included, a requestPrepend (or requestAppend) event is triggered.\n    if (hasVirtualItems) {\n      const isStartVirtual = nextVisibleItems[0]?.isVirtual;\n      const isEndVirtual = nextVisibleItems[nextVisibleItems.length - 1]?.isVirtual;\n\n      if ((!isDirectionEnd || !isEnd) && isStartVirtual) {\n        const realItemIndex = findIndex(nextVisibleItems, (item) => !item.isVirtual);\n        const endVirtualItemIndex = (realItemIndex === -1 ? nextVisibleItems.length : realItemIndex) - 1;\n\n        if (nextVisibleItems[endVirtualItemIndex]) {\n          this.trigger(\"requestPrepend\", {\n            key: realItemIndex > -1 ? nextVisibleItems[realItemIndex].key : undefined,\n            nextKey: nextVisibleItems[endVirtualItemIndex].key,\n            nextKeys: nextVisibleItems.slice(0, endVirtualItemIndex + 1).map((item) => item.key),\n            isVirtual: true,\n          });\n        }\n      } else if ((isDirectionEnd || !isStart) && isEndVirtual) {\n        const realItemIndex = findLastIndex(nextVisibleItems, (item) => !item.isVirtual);\n        const startVirtualItemIndex = realItemIndex + 1;\n\n        if (nextVisibleItems[startVirtualItemIndex]) {\n          this.trigger(\"requestAppend\", {\n            key: realItemIndex > -1 ? nextVisibleItems[realItemIndex].key : undefined,\n            nextKey: nextVisibleItems[startVirtualItemIndex].key,\n            nextKeys: nextVisibleItems.slice(startVirtualItemIndex).map((item) => item.key),\n            isVirtual: true,\n          });\n        }\n      }\n    } else if (!this._requestVirtualItems()) {\n      if ((!isDirectionEnd || !isEnd) && isStart) {\n        this.trigger(\"requestPrepend\", {\n          key: items[prevStartCursor].key,\n          isVirtual: false,\n        });\n      } else if ((isDirectionEnd || !isStart) && isEnd) {\n        this.trigger(\"requestAppend\", {\n          key: items[prevEndCursor].key,\n          isVirtual: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Call the requestAppend or requestPrepend event to fill the virtual items.\n   * @ko virtual item을 채우기 위해 requestAppend 또는 requestPrepend 이벤트를 호출합니다.\n   * @return - Whether the event is called. <ko>이벤트를 호출했는지 여부.</ko>\n   */\n  public _requestVirtualItems() {\n    const isDirectionEnd = this.options.defaultDirection === \"end\";\n    const items = this.items;\n    const totalVisibleItems = this.getVisibleItems();\n    const visibleItems = totalVisibleItems.filter((item) => !item.isVirtual);\n    const totalVisibleLength = totalVisibleItems.length;\n    const visibleLength = visibleItems.length;\n    const startCursor = this.getStartCursor();\n    const endCursor = this.getEndCursor();\n\n    if (visibleLength === totalVisibleLength) {\n      return false;\n    } else if (visibleLength) {\n      const startKey = visibleItems[0].key;\n      const endKey = visibleItems[visibleLength - 1].key;\n      const startIndex = findIndex(items, (item) => item.key === startKey) - 1;\n      const endIndex = findIndex(items, (item) => item.key === endKey) + 1;\n\n      const isEnd = endIndex <= endCursor;\n      const isStart = startIndex >= startCursor;\n\n      // Fill the placeholder with the original item.\n      if ((isDirectionEnd || !isStart) && isEnd) {\n        this.trigger(\"requestAppend\", {\n          key: endKey,\n          nextKey: items[endIndex].key,\n          isVirtual: true,\n        });\n        return true;\n      } else if ((!isDirectionEnd || !isEnd) && isStart) {\n        this.trigger(\"requestPrepend\", {\n          key: startKey,\n          nextKey: items[startIndex].key,\n          isVirtual: true,\n        });\n        return true;\n      }\n    } else if (totalVisibleLength) {\n      const lastItem = totalVisibleItems[totalVisibleLength - 1];\n\n      if (isDirectionEnd) {\n        this.trigger(\"requestAppend\", {\n          nextKey: totalVisibleItems[0].key,\n          isVirtual: true,\n        });\n      } else {\n        this.trigger(\"requestPrepend\", {\n          nextKey: lastItem.key,\n          isVirtual: true,\n        });\n      }\n      return true;\n    }\n    return false;\n  }\n  public setCursors(startCursor: number, endCursor: number) {\n    this.startCursor = startCursor;\n    this.endCursor = endCursor;\n  }\n  public setSize(size: number) {\n    this.size = size;\n  }\n  public getStartCursor() {\n    return this.startCursor;\n  }\n  public getEndCursor() {\n    return this.endCursor;\n  }\n  public isLoading(direction: \"start\" | \"end\") {\n    const startCursor = this.startCursor;\n    const endCursor = this.endCursor;\n    const items = this.items;\n    const firstItem = items[startCursor]!;\n    const lastItem = items[endCursor]!;\n    const length = items.length;\n\n    if (\n      direction === DIRECTION.END\n      && endCursor > -1\n      && endCursor < length - 1\n      && !lastItem.isVirtual\n      && !isFlatOutline(lastItem.startOutline, lastItem.endOutline)\n    ) {\n      return false;\n    }\n    if (\n      direction === DIRECTION.START\n      && startCursor > 0\n      && !firstItem.isVirtual\n      && !isFlatOutline(firstItem.startOutline, firstItem.endOutline)\n    ) {\n      return false;\n    }\n    return true;\n  }\n  public setItems(nextItems: InfiniteItem[]) {\n    this.items = nextItems;\n\n    const itemKeys: Record<string | number, InfiniteItem> = {};\n\n    nextItems.forEach((item) => {\n      itemKeys[item.key] = item;\n    });\n    this.itemKeys = itemKeys;\n  }\n  public syncItems(nextItems: InfiniteItem[]) {\n    const prevItems = this.items;\n    const prevStartCursor = this.startCursor;\n    const prevEndCursor = this.endCursor;\n    const {\n      startCursor: nextStartCursor,\n      endCursor: nextEndCursor,\n    } = getNextCursors(\n      this.items.map((item) => item.key),\n      nextItems.map((item) => item.key),\n      prevStartCursor,\n      prevEndCursor,\n    );\n    // sync items between cursors\n    let isChange = nextEndCursor - nextStartCursor !== prevEndCursor - prevStartCursor\n      || (prevStartCursor === -1 || nextStartCursor === -1);\n\n    if (!isChange) {\n      const prevVisibleItems = prevItems.slice(prevStartCursor, prevEndCursor + 1);\n      const nextVisibleItems = nextItems.slice(nextStartCursor, nextEndCursor + 1);\n      const visibleResult = diff(prevVisibleItems, nextVisibleItems, (item) => item.key);\n\n      isChange = visibleResult.added.length > 0\n        || visibleResult.removed.length > 0\n        || visibleResult.changed.length > 0;\n    }\n    this.setItems(nextItems);\n    this.setCursors(nextStartCursor, nextEndCursor);\n    return isChange;\n  }\n  public getItems() {\n    return this.items;\n  }\n  public getVisibleItems() {\n    const startCursor = this.startCursor;\n    const endCursor = this.endCursor;\n\n    if (startCursor === -1) {\n      return [];\n    }\n    return this.items.slice(startCursor, endCursor + 1);\n  }\n  public getItemByKey(key: string | number) {\n    return this.itemKeys[key];\n  }\n  public getRenderedVisibleItems() {\n    const items = this.getVisibleItems();\n    const rendered = items.map(({ startOutline, endOutline }) => {\n      const length = startOutline.length;\n\n      if (length === 0 || length !== endOutline.length) {\n        return false;\n      }\n      return startOutline.some((pos, i) => endOutline[i] !== pos);\n    });\n    const startIndex = rendered.indexOf(true);\n    const endIndex = rendered.lastIndexOf(true);\n\n    return endIndex === -1 ? [] : items.slice(startIndex, endIndex + 1);\n  }\n  public destroy() {\n    this.off();\n    this.startCursor = -1;\n    this.endCursor = -1;\n    this.items = [];\n    this.size = 0;\n  }\n}\n","import Component from \"@egjs/component\";\nimport { diff, DiffResult } from \"@egjs/list-differ\";\nimport { toArray } from \"../utils\";\n\nexport interface RendererItem {\n  key: string | number;\n  renderKey?: string;\n  element?: Element | null;\n}\n\nexport interface OnRendererUpdated<T extends RendererItem = RendererItem> {\n  items: T[];\n  elements: Element[];\n  isChanged: boolean;\n  isItemChanged: boolean;\n  state: Record<string, any>;\n  diffResult: DiffResult<T>;\n}\n\nexport interface OnRendererUpdate {\n  state: Record<string, any>;\n}\nexport interface RendererEvents<T extends RendererItem = RendererItem> {\n  update: OnRendererUpdate;\n  updated: OnRendererUpdated<T>;\n  requestUpdate: OnRendererUpdate;\n}\n\nexport class Renderer<Item extends RendererItem = RendererItem> extends Component<RendererEvents> {\n  protected items: Item[] = [];\n  protected container: Element | null = null;\n  protected rendererKey = 0;\n  private _diffResult: DiffResult<Item>;\n  private _updateTimer = 0;\n  private _state: Record<string, any> = {};\n  private _isItemChanged = false;\n\n  public updateKey() {\n    this.rendererKey = Date.now();\n  }\n\n  public getItems() {\n    return this.items;\n  }\n  public setContainer(container: Element) {\n    this.container = container;\n  }\n  public render(nextItems: Item[], state?: Record<string, any>) {\n    return this.syncItems(nextItems, state);\n  }\n  public update(state: Record<string, any> = {}) {\n    this._state = { ...this._state, ...state };\n    this.trigger(\"update\", {\n      state,\n    });\n\n    clearTimeout(this._updateTimer);\n    this._updateTimer = window.setTimeout(() => {\n      this.trigger(\"requestUpdate\", {\n        state,\n      });\n    });\n  }\n  public updated(nextElements: ArrayLike<Element> = this.container?.children ?? []) {\n    const diffResult = this._diffResult;\n    const isChanged = !!(diffResult.added.length || diffResult.removed.length || diffResult.changed.length);\n    const state = this._state;\n    const isItemChanged = this._isItemChanged;\n    const nextItems = diffResult.list;\n\n\n    this._isItemChanged = false;\n    this._state = {};\n    this.items = nextItems;\n    nextItems.forEach((item, i) => {\n      item.element = nextElements[i];\n    });\n\n\n    this.trigger(\"updated\", {\n      items: nextItems,\n      elements: toArray(nextElements),\n      diffResult: this._diffResult,\n      state,\n      isItemChanged,\n      isChanged,\n    });\n\n    return isChanged;\n  }\n  public syncItems(items: Item[], state: Record<string, any> = {}) {\n    const rendererKey = this.rendererKey;\n    const prevItems = this.items;\n    const nextItems = items.map((item) => ({\n      ...item,\n      renderKey: `${rendererKey}_${item.key}`,\n    }));\n    const result = diff(prevItems, nextItems, (item) => item.renderKey!);\n\n    this._isItemChanged = !!result.added.length || !!result.removed.length || !!result.changed.length;\n    this._state = { ...this._state, ...state };\n    this._diffResult = result;\n\n    return result;\n  }\n  public destroy() {\n    this.off();\n  }\n}\n","import { Renderer, RendererItem } from \"./Renderer\";\n\nexport class VanillaRenderer<Item extends RendererItem = RendererItem> extends Renderer<Item> {\n  public render(nextItems: Item[], state?: Record<string, any>) {\n    const container = this.container!;\n    const result = super.render(nextItems, state);\n    const {\n      prevList,\n      removed,\n      ordered,\n      added,\n      list,\n    } = result;\n    const diffList = [...prevList];\n\n\n    removed.forEach((index) => {\n      diffList.splice(index, 1);\n      container.removeChild(prevList[index].element!);\n    });\n    ordered.forEach(([prevIndex, nextIndex]) => {\n      const item = diffList.splice(prevIndex, 1)[0];\n\n      diffList.splice(nextIndex, 0, item);\n      container.insertBefore(item.element!, diffList[nextIndex + 1]?.element ?? null);\n    });\n    added.forEach((index) => {\n      const item = list[index];\n\n      diffList.splice(index, 0, item);\n      container.insertBefore(item.element!, diffList[index + 1]?.element ?? null);\n    });\n\n    this.updated(container.children);\n    return result;\n  }\n}\n","import { InfiniteGridItem } from \"../InfiniteGridItem\";\nimport { convertHTMLtoElement } from \"../utils\";\nimport { RendererItem } from \"./Renderer\";\nimport { VanillaRenderer } from \"./VanillaRenderer\";\n\nexport interface GridRendererItem extends RendererItem {\n  orgItem: InfiniteGridItem;\n}\n\nexport class VanillaGridRenderer extends VanillaRenderer<GridRendererItem> {\n  public syncItems(nextItems: GridRendererItem[]) {\n    const result = super.syncItems(nextItems);\n    const {\n      added,\n      list,\n    } = result;\n    added.forEach((index) => {\n      const orgItem = nextItems[index].orgItem;\n\n      if (orgItem.html && !orgItem.element) {\n        orgItem.element = convertHTMLtoElement(orgItem.html)[0];\n      }\n      list[index].element = orgItem.element!;\n    });\n\n    return result;\n  }\n}\n","import { findTarget, Ref } from \"@cfcs/core\";\nimport Component, { ComponentEvent } from \"@egjs/component\";\nimport { CONTAINER_CLASS_NAME, IS_IOS } from \"./consts\";\nimport { OnChangeScroll } from \"./types\";\nimport { isWindow, toArray } from \"./utils\";\n\nexport interface ScrollManagerOptions {\n  scrollContainer?: HTMLElement | string | Ref<HTMLElement> | null;\n  container?: boolean | HTMLElement | string | Ref<HTMLElement>;\n  containerTag?: string;\n  horizontal?: boolean;\n}\n\nexport interface ScrollManagerStatus {\n  contentSize: number;\n  scrollOffset: number;\n  prevScrollPos: number;\n}\n\n\nexport interface ScrollManagerEvents {\n  scroll: OnChangeScroll;\n}\n\nexport class ScrollManager extends Component<ScrollManagerEvents> {\n  public options: Required<ScrollManagerOptions>;\n  protected prevScrollPos: number | null = null;\n  protected eventTarget: HTMLElement | Window;\n  protected scrollOffset = 0;\n  protected contentSize = 0;\n  protected container: HTMLElement;\n  protected scrollContainer: HTMLElement;\n  private _orgCSSText: string;\n  private _isScrollIssue = IS_IOS;\n  private _isCreateElement: boolean;\n\n  constructor(\n    protected wrapper: HTMLElement,\n    options: ScrollManagerOptions,\n  ) {\n    super();\n    this.options = {\n      container: false,\n      containerTag: \"div\",\n      horizontal: false,\n      scrollContainer: null,\n      ...options,\n    };\n\n    this._init();\n  }\n  public getWrapper() {\n    return this.wrapper;\n  }\n  public getContainer() {\n    return this.container;\n  }\n  public getScrollContainer() {\n    return this.scrollContainer;\n  }\n  public getScrollOffset() {\n    return this.scrollOffset;\n  }\n  public getContentSize() {\n    return this.contentSize;\n  }\n  public getRelativeScrollPos() {\n    return (this.prevScrollPos || 0) - this.scrollOffset;\n  }\n  public getScrollPos() {\n    return this.prevScrollPos;\n  }\n  public setScrollPos(pos: number) {\n    this.prevScrollPos = pos;\n  }\n  public getOrgScrollPos() {\n    const eventTarget = this.eventTarget;\n    const horizontal = this.options.horizontal;\n\n    const prop = `scroll${horizontal ? \"Left\" : \"Top\"}` as \"scrollLeft\" | \"scrollTop\";\n\n    if (isWindow(eventTarget)) {\n      return window[horizontal ? \"pageXOffset\" : \"pageYOffset\"]\n        || document.documentElement[prop] || document.body[prop];\n    } else {\n      return eventTarget[prop];\n    }\n  }\n  public setStatus(status: ScrollManagerStatus) {\n    this.contentSize = status.contentSize;\n    this.scrollOffset = status.scrollOffset;\n    this.prevScrollPos = status.prevScrollPos;\n\n    this.scrollTo(this.prevScrollPos);\n  }\n  public getStatus(): ScrollManagerStatus {\n    return {\n      contentSize: this.contentSize,\n      scrollOffset: this.scrollOffset,\n      prevScrollPos: this.prevScrollPos!,\n    };\n  }\n  public scrollTo(pos: number) {\n    const eventTarget = this.eventTarget;\n    const horizontal = this.options.horizontal;\n    const [x, y] = horizontal ? [pos, 0] : [0, pos];\n\n    if (isWindow(eventTarget)) {\n      eventTarget.scroll(x, y);\n    } else {\n      eventTarget.scrollLeft = x;\n      eventTarget.scrollTop = y;\n    }\n  }\n  public scrollBy(pos: number) {\n    if (!pos) {\n      return;\n    }\n    const eventTarget = this.eventTarget;\n    const horizontal = this.options.horizontal;\n    const [x, y] = horizontal ? [pos, 0] : [0, pos];\n\n\n    this.prevScrollPos! += pos;\n\n    if (isWindow(eventTarget)) {\n      eventTarget.scrollBy(x, y);\n    } else {\n      eventTarget.scrollLeft += x;\n      eventTarget.scrollTop += y;\n    }\n  }\n  public resize() {\n    const scrollContainer = this.scrollContainer;\n    const horizontal = this.options.horizontal;\n    const isBody = scrollContainer === document.body;\n    const scrollContainerRect = isBody\n      ? { top: 0, left: 0 }\n      : scrollContainer.getBoundingClientRect();\n    const containerRect = this.container.getBoundingClientRect();\n\n    this.scrollOffset = (this.prevScrollPos! || 0) + (horizontal\n      ? containerRect.left - scrollContainerRect.left\n      : containerRect.top - scrollContainerRect.top);\n\n    if (isBody) {\n      this.contentSize = horizontal ? window.innerWidth : window.innerHeight;\n    } else {\n      this.contentSize = horizontal ? scrollContainer.offsetWidth : scrollContainer.offsetHeight;\n    }\n  }\n  public destroy() {\n    const container = this.container;\n\n    this.eventTarget.removeEventListener(\"scroll\", this._onCheck);\n\n    if (this._isCreateElement) {\n      const scrollContainer = this.scrollContainer;\n\n      const fragment = document.createDocumentFragment();\n      const childNodes = toArray(container.childNodes);\n\n      scrollContainer.removeChild(container);\n      childNodes.forEach((childNode) => {\n        fragment.appendChild(childNode);\n      });\n      scrollContainer.appendChild(fragment);\n    } else if (this.options.container) {\n      container.style.cssText = this._orgCSSText;\n    }\n  }\n  private _init() {\n    const {\n      container: containerOption,\n      containerTag,\n      horizontal,\n      scrollContainer: scrollContainerOption,\n    } = this.options;\n    const wrapper = this.wrapper;\n    let scrollContainer = wrapper;\n    let container = wrapper;\n    let containerCSSText = \"\";\n\n    if (!containerOption) {\n      scrollContainer = findTarget(scrollContainerOption) || document.body;\n      containerCSSText = container.style.cssText;\n    } else {\n      if (containerOption === true) {\n        // Create Container\n        container = document.createElement(containerTag) as HTMLElement;\n\n        container.style.position = \"relative\";\n        container.className = CONTAINER_CLASS_NAME;\n        const childNodes = toArray(scrollContainer.childNodes);\n\n        childNodes.forEach((childNode) => {\n          container.appendChild(childNode);\n        });\n        scrollContainer.appendChild(container);\n\n        this._isCreateElement = true;\n      } else {\n        // Find Container\n        container = findTarget(containerOption)!;\n      }\n      containerCSSText = container.style.cssText;\n\n      const style = scrollContainer.style;\n\n      [style.overflowX, style.overflowY] = horizontal ? [\"scroll\", \"hidden\"] : [\"hidden\", \"scroll\"];\n\n      if (horizontal) {\n        container.style.height = \"100%\";\n      }\n    }\n    const eventTarget = scrollContainer === document.body ? window : scrollContainer;\n\n    eventTarget.addEventListener(\"scroll\", this._onCheck);\n    this._orgCSSText = containerCSSText;\n    this.container = container;\n    this.scrollContainer = scrollContainer;\n    this.eventTarget = eventTarget;\n    this.resize();\n    this.setScrollPos(this.getOrgScrollPos());\n  }\n  private _onCheck = () => {\n    const prevScrollPos = this.getScrollPos();\n    const nextScrollPos = this.getOrgScrollPos();\n\n    this.setScrollPos(nextScrollPos);\n\n    if (prevScrollPos === null || (this._isScrollIssue && nextScrollPos === 0) || prevScrollPos === nextScrollPos) {\n      nextScrollPos && (this._isScrollIssue = false);\n      return;\n    }\n    this._isScrollIssue = false;\n    this.trigger(new ComponentEvent(\"scroll\", {\n      direction: prevScrollPos < nextScrollPos ? \"end\" : \"start\",\n      scrollPos: nextScrollPos,\n      relativeScrollPos: this.getRelativeScrollPos(),\n    }));\n  }\n}\n","import Component, { ComponentEvent } from \"@egjs/component\";\nimport {\n  ContainerManager,\n  DEFAULT_GRID_OPTIONS,\n  Properties,\n  RenderOptions,\n  MOUNT_STATE,\n  OnContentError,\n  ItemRenderer,\n  GridItem,\n  ResizeWatcherResizeEvent,\n  getUpdatedItems,\n} from \"@egjs/grid\";\nimport {\n  DIRECTION,\n  GROUP_TYPE,\n  INFINITEGRID_EVENTS, INFINITEGRID_PROPERTY_TYPES,\n  ITEM_TYPE, STATUS_TYPE,\n} from \"./consts\";\nimport { GroupManager } from \"./GroupManager\";\nimport {\n  Infinite,\n  OnInfiniteChange,\n  OnInfiniteRequestAppend,\n  OnInfiniteRequestPrepend,\n} from \"./Infinite\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\nimport { OnRendererUpdated } from \"./Renderer/Renderer\";\nimport { GridRendererItem, VanillaGridRenderer } from \"./Renderer/VanillaGridRenderer\";\nimport { ScrollManager } from \"./ScrollManager\";\nimport {\n  InfiniteGridEvents, InfiniteGridGroup,\n  InfiniteGridInsertedItems, InfiniteGridItemInfo,\n  InfiniteGridOptions,\n  InfiniteGridStatus,\n  InsertedPlaceholdersResult,\n  OnPickedRenderComplete,\n  OnRequestInsert,\n  OnChangeScroll,\n} from \"./types\";\nimport {\n  InfiniteGridGetterSetter, toArray, convertInsertedItems, findIndex,\n  findLastIndex, isString,\n} from \"./utils\";\n\n\n/**\n * A module used to arrange items including content infinitely according to layout type. With this module, you can implement various layouts composed of different items whose sizes vary. It guarantees performance by maintaining the number of DOMs the module is handling under any circumstance\n * @ko 콘텐츠가 있는 아이템을 레이아웃 타입에 따라 무한으로 배치하는 모듈. 다양한 크기의 아이템을 다양한 레이아웃으로 배치할 수 있다. 아이템의 개수가 계속 늘어나도 모듈이 처리하는 DOM의 개수를 일정하게 유지해 최적의 성능을 보장한다\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @example\n```html\n<ul id=\"grid\">\n  <li class=\"card\">\n    <div>test1</div>\n  </li>\n  <li class=\"card\">\n    <div>test2</div>\n  </li>\n  <li class=\"card\">\n    <div>test3</div>\n  </li>\n  <li class=\"card\">\n    <div>test4</div>\n  </li>\n  <li class=\"card\">\n    <div>test5</div>\n  </li>\n  <li class=\"card\">\n    <div>test6</div>\n  </li>\n</ul>\n<script>\nimport { MasonryInfiniteGrid } from \"@egjs/infinitegrid\";\nvar some = new MasonryInfiniteGrid(\"#grid\").on(\"renderComplete\", function(e) {\n  // ...\n});\n// If you already have items in the container, call \"layout\" method.\nsome.renderItems();\n</script>\n```\n */\n@InfiniteGridGetterSetter\nclass InfiniteGrid<Options extends InfiniteGridOptions = InfiniteGridOptions> extends Component<InfiniteGridEvents> {\n  public static defaultOptions = {\n    ...DEFAULT_GRID_OPTIONS,\n    container: false,\n    containerTag: \"div\",\n    renderer: null,\n    threshold: 100,\n    useRecycle: true,\n    scrollContainer: null,\n  } as Required<InfiniteGridOptions>;\n  public static propertyTypes = INFINITEGRID_PROPERTY_TYPES;\n  protected wrapperElement: HTMLElement;\n  protected scrollManager: ScrollManager;\n  protected itemRenderer: ItemRenderer;\n  protected containerManager: ContainerManager;\n  protected infinite: Infinite;\n  protected groupManager: GroupManager;\n  protected options: Required<Options>;\n  private _waitType: \"\" | \"start\" | \"end\" = \"\";\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the InfiniteGrid module <ko>eg.InfiniteGrid 모듈의 옵션 객체</ko>\n   */\n  constructor(wrapper: HTMLElement | string, options: Options) {\n    super();\n    this.options = {\n      ...((this.constructor as typeof InfiniteGrid).defaultOptions as Required<Options>),\n      renderer: new VanillaGridRenderer().on(\"requestUpdate\", () => this._render()),\n      ...options,\n    };\n\n    const {\n      gridConstructor,\n      containerTag,\n      container,\n      renderer,\n      threshold,\n      useRecycle,\n      scrollContainer,\n      ...gridOptions\n    } = this.options;\n    // options.container === false, wrapper = container, scrollContainer = document.body\n    // options.container === true, wrapper = scrollContainer, container = wrapper's child\n    // options.container === string,\n    const {\n      horizontal,\n      attributePrefix,\n      useTransform,\n      percentage,\n      isConstantSize,\n      isEqualSize,\n      autoResize,\n      useResizeObserver,\n      resizeDebounce,\n      maxResizeDebounce,\n      defaultDirection,\n    } = gridOptions;\n    const wrapperElement = isString(wrapper) ? document.querySelector(wrapper) as HTMLElement : wrapper;\n    const scrollManager = new ScrollManager(wrapperElement, {\n      scrollContainer,\n      container,\n      containerTag,\n      horizontal,\n    }).on({\n      scroll: this._onScroll,\n    });\n    const containerElement = scrollManager.getContainer();\n    const containerManager = new ContainerManager(containerElement, {\n      horizontal,\n      autoResize,\n      resizeDebounce,\n      maxResizeDebounce,\n      useResizeObserver,\n    }).on(\"resize\", this._onResize);\n    const itemRenderer = new ItemRenderer({\n      attributePrefix,\n      horizontal,\n      useTransform,\n      percentage,\n      isEqualSize,\n      isConstantSize,\n    });\n    const infinite = new Infinite({\n      defaultDirection,\n      useRecycle,\n      threshold,\n    }).on({\n      \"change\": this._onChange,\n      \"requestAppend\": this._onRequestAppend,\n      \"requestPrepend\": this._onRequestPrepend,\n    });\n\n    infinite.setSize(scrollManager.getContentSize());\n    const groupManager = new GroupManager(containerElement, {\n      gridConstructor: gridConstructor!,\n      externalItemRenderer: itemRenderer,\n      externalContainerManager: containerManager,\n      gridOptions,\n    });\n\n    groupManager.on({\n      \"renderComplete\": this._onRenderComplete,\n      \"contentError\": this._onContentError,\n    });\n\n    renderer!.setContainer(containerElement);\n    renderer!.on(\"updated\", this._onRendererUpdated);\n\n    this.itemRenderer = itemRenderer;\n    this.groupManager = groupManager;\n    this.wrapperElement = wrapperElement;\n    this.scrollManager = scrollManager;\n    this.containerManager = containerManager;\n    this.infinite = infinite;\n\n    this.containerManager.resize();\n  }\n  /**\n   * Rearrange items to fit the grid and render them. When rearrange is complete, the `renderComplete` event is fired.\n   * @ko grid에 맞게 아이템을 재배치하고 렌더링을 한다. 배치가 완료되면 `renderComplete` 이벤트가 발생한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   * @example\n   * ```ts\n   * import { MasonryInfiniteGrid } from \"@egjs/infinitegrid\";\n   * const grid = new MasonryInfiniteGrid();\n   *\n   * grid.on(\"renderComplete\", e => {\n   *   console.log(e);\n   * });\n   * grid.renderItems();\n   * ```\n   */\n  public renderItems(options: RenderOptions = {}) {\n    this._renderItems(options);\n    return this;\n  }\n  /**\n   * Returns the wrapper element specified by the user.\n   * @ko 컨테이너 엘리먼트를 반환한다.\n   */\n  public getWrapperElement() {\n    return this.scrollManager.getWrapper();\n  }\n  /**\n   * Returns the container element corresponding to the scroll area.\n   * @ko 스크롤 영역에 해당하는 컨테이너 엘리먼트를 반환한다.\n   */\n  public getScrollContainerElement() {\n    return this.scrollManager.getScrollContainer();\n  }\n  /**\n   * Returns the container element containing item elements.\n   * @ko 아이템 엘리먼트들을 담긴 컨테이너 엘리먼트를 반환한다.\n   */\n  public getContainerElement() {\n    return this.scrollManager.getContainer();\n  }\n  /**\n   * When items change, it synchronizes and renders items.\n   * @ko items가 바뀐 경우 동기화를 하고 렌더링을 한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public syncItems(items: InfiniteGridItemInfo[]): this {\n    this.groupManager.syncItems(items);\n    this._syncGroups();\n\n    return this;\n  }\n  /**\n   * Change the currently visible groups.\n   * @ko 현재 보이는 그룹들을 바꾼다.\n   * @param - first index of visible groups. <ko>보이는 그룹의 첫번째 index.</ko>\n   * @param - last index of visible groups. <ko>보이는 그룹의 마지막 index.</ko>\n   * @param - Whether the first rendering has already been done. <ko>첫 렌더링이 이미 되어있는지 여부.</ko>\n   */\n  public setCursors(startCursor: number, endCursor: number, useFirstRender?: boolean): this {\n    this.groupManager.setCursors(startCursor, endCursor);\n    this.infinite.setCursors(startCursor, endCursor);\n\n    if (useFirstRender) {\n      this._syncItems();\n    } else {\n      this._update();\n      this._checkEndLoading();\n    }\n    return this;\n  }\n  /**\n   * Returns the first index of visible groups.\n   * @ko 보이는 그룹들의 첫번째 index를 반환한다.\n   */\n  public getStartCursor(): number {\n    return this.infinite.getStartCursor();\n  }\n  /**\n   * Returns the last index of visible groups.\n   * @ko 보이는 그룹들의 마지막 index를 반환한다.\n   */\n  public getEndCursor(): number {\n    return this.infinite.getEndCursor();\n  }\n  /**\n   * Add items at the bottom(right) of the grid.\n   * @ko 아이템들을 grid 아래(오른쪽)에 추가한다.\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * ig.append(`<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.append([`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.append([HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public append(items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    return this.insert(-1, items, groupKey);\n  }\n  /**\n   * Add items at the top(left) of the grid.\n   * @ko 아이템들을 grid 위(왼쪽)에 추가한다.\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * ig.prepend(`<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.prepend([`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.prepend([HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public prepend(items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    return this.insert(0, items, groupKey);\n  }\n  /**\n   * Add items to a specific index.\n   * @ko 아이템들을 특정 index에 추가한다.\n   * @param - index to add <ko>추가하기 위한 index</ko>\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * ig.insert(2, `<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.insert(3, [`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.insert(4, [HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public insert(index: number, items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    const nextItemInfos: InfiniteGridItemInfo[] = this.groupManager.getGroupItems();\n    const itemInfos = convertInsertedItems(items, groupKey);\n\n    if (index === -1) {\n      nextItemInfos.push(...itemInfos);\n    } else {\n      nextItemInfos.splice(index, 0, ...itemInfos);\n    }\n    return this.syncItems(nextItemInfos);\n  }\n  /**\n   * Add items based on group index.\n   * @ko group의 index 기준으로 item들을 추가한다.\n   * @param - group index to add <ko>추가하기 위한 group의 index</ko>\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * ig.insertByGroupIndex(2, `<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.insertByGroupIndex(3, [`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.insertByGroupIndex(4, [HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public insertByGroupIndex(groupIndex: number, items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    const nextGroupInfos: InfiniteGridGroup[] = this.groupManager.getGroups();\n    const rightGroup = nextGroupInfos[groupIndex];\n\n    if (!rightGroup) {\n      return this.append(items, groupKey);\n    }\n    const nextItemInfos: InfiniteGridItemInfo[] = this.groupManager.getGroupItems();\n    const rightGroupKey = rightGroup.groupKey;\n    const rightItemIndex = findIndex(nextItemInfos, (item) => item.groupKey === rightGroupKey);\n\n    return this.insert(rightItemIndex, items, groupKey);\n  }\n  /**\n   * Returns the current state of a module such as location information. You can use the setStatus() method to restore the information returned through a call to this method.\n   * @ko 아이템의 위치 정보 등 모듈의 현재 상태 정보를 반환한다. 이 메서드가 반환한 정보를 저장해 두었다가 setStatus() 메서드로 복원할 수 있다\n   * @param - STATUS_TYPE.NOT_REMOVE = Get all information about items. STATUS_TYPE.REMOVE_INVISIBLE_ITEMS = Get information on visible items only. STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS = Compress invisible items. You can replace it with a placeholder. STATUS_TYPE.MINIMIZE_INVISIBLE_GROUPS = Compress invisible groups. <ko> STATUS_TYPE.NOT_REMOVE = 모든 아이템들의 정보를 가져온다. STATUS_TYPE.REMOVE_INVISIBLE_ITEMS = 보이는 아이템들의 정보만 가져온다. STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS = 안보이는 아이템들을 압축한다. placeholder로 대체가 가능하다. STATUS_TYPE.MINIMIZE_INVISIBLE_GROUPS = 안보이는 그룹을 압축한다.</ko>\n   * @param - Whether to include items corresponding to placeholders. <ko>placeholder에 해당하는 아이템들을 포함할지 여부.</ko>\n   */\n  public getStatus(type?: STATUS_TYPE, includePlaceholders?: boolean): InfiniteGridStatus {\n    return {\n      containerManager: this.containerManager.getStatus(),\n      itemRenderer: this.itemRenderer.getStatus(),\n      groupManager: this.groupManager.getGroupStatus(type, includePlaceholders),\n      scrollManager: this.scrollManager.getStatus(),\n    };\n  }\n\n  /**\n   * You can set placeholders to restore status or wait for items to be added.\n   * @ko status 복구 또는 아이템 추가 대기를 위한 placeholder를 설정할 수 있다.\n   * @param - The placeholder status. <ko>placeholder의 status</ko>\n   */\n  public setPlaceholder(info: Partial<InfiniteGridItemStatus> | null): this {\n    this.groupManager.setPlaceholder(info);\n    return this;\n  }\n  /**\n   * You can set placeholders to restore status or wait for items to be added.\n   * @ko status 복구 또는 아이템 추가 대기를 위한 placeholder를 설정할 수 있다.\n   * @param - The placeholder status. <ko>placeholder의 status</ko>\n   */\n  public setLoading(info: Partial<InfiniteGridItemStatus> | null): this {\n    this.groupManager.setLoading(info);\n    return this;\n  }\n  /**\n   * Add the placeholder at the end.\n   * @ko placeholder들을 마지막에 추가한다.\n   * @param - Items that correspond to placeholders. If it is a number, it duplicates the number of copies. <ko>placeholder에 해당하는 아이템들. 숫자면 갯수만큼 복제를 한다.</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   */\n  public appendPlaceholders(\n    items: number | InfiniteGridItemStatus[],\n    groupKey?: string | number,\n  ): InsertedPlaceholdersResult {\n    const result = this.groupManager.appendPlaceholders(items, groupKey);\n\n    this._syncGroups(true);\n    return {\n      ...result,\n      remove: () => {\n        this.removePlaceholders({ groupKey: result.group.groupKey });\n      },\n    };\n  }\n  /**\n   * Add the placeholder at the start.\n   * @ko placeholder들을 처음에 추가한다.\n   * @param - Items that correspond to placeholders. If it is a number, it duplicates the number of copies. <ko>placeholder에 해당하는 아이템들. 숫자면 갯수만큼 복제를 한다.</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   */\n  public prependPlaceholders(\n    items: number | InfiniteGridItemStatus[],\n    groupKey?: string | number,\n  ): InsertedPlaceholdersResult {\n    const result = this.groupManager.prependPlaceholders(items, groupKey);\n\n    this._syncGroups(true);\n    return {\n      ...result,\n      remove: () => {\n        this.removePlaceholders({ groupKey: result.group.groupKey });\n      },\n    };\n  }\n\n  /**\n   * Remove placeholders\n   * @ko placeholder들을 삭제한다.\n   * @param type - Remove the placeholders corresponding to the groupkey. When \"start\" or \"end\", remove all placeholders in that direction. <ko>groupkey에 해당하는 placeholder들을 삭제한다. \"start\" 또는 \"end\" 일 때 해당 방향의 모든 placeholder들을 삭제한다.</ko>\n   */\n  public removePlaceholders(type: \"start\" | \"end\" | { groupKey: string | number }) {\n    this.groupManager.removePlaceholders(type);\n    this._syncGroups(true);\n  }\n\n  /**\n   * Sets the status of the InfiniteGrid module with the information returned through a call to the getStatus() method.\n   * @ko getStatus() 메서드가 저장한 정보로 InfiniteGrid 모듈의 상태를 설정한다.\n   * @param - status object of the InfiniteGrid module. <ko>InfiniteGrid 모듈의 status 객체.</ko>\n   * @param - Whether the first rendering has already been done. <ko>첫 렌더링이 이미 되어있는지 여부.</ko>\n   */\n  public setStatus(status: InfiniteGridStatus, useFirstRender?: boolean): this {\n    this.itemRenderer.setStatus(status.itemRenderer);\n    this.containerManager.setStatus(status.containerManager);\n    this.scrollManager.setStatus(status.scrollManager);\n    const groupManager = this.groupManager;\n    const prevInlineSize = this.containerManager.getInlineSize();\n\n    groupManager.setGroupStatus(status.groupManager);\n    this._syncInfinite();\n    this.infinite.setCursors(groupManager.getStartCursor(), groupManager.getEndCursor());\n\n    this._getRenderer().updateKey();\n\n    const state = {\n      isResize: this.containerManager.getInlineSize() !== prevInlineSize,\n      isRestore: true,\n    };\n    if (useFirstRender) {\n      this._syncItems(state);\n    } else {\n      this._update(state);\n    }\n    return this;\n  }\n  /**\n   * Removes the group corresponding to index.\n   * @ko index에 해당하는 그룹을 제거 한다.\n   */\n  public removeGroupByIndex(index: number): this {\n    const nextGroups = this.getGroups();\n\n    return this.removeGroupByKey(nextGroups[index].groupKey);\n  }\n  /**\n   * Removes the group corresponding to key.\n   * @ko key에 해당하는 그룹을 제거 한다.\n   */\n  public removeGroupByKey(key: number | string): this {\n    const nextItemInfos = this.getItems();\n\n    const firstIndex = findIndex(nextItemInfos, (item) => item.groupKey === key);\n    const lastIndex = findLastIndex(nextItemInfos, (item) => item.groupKey === key);\n\n    if (firstIndex === -1) {\n      return this;\n    }\n    nextItemInfos.splice(firstIndex, lastIndex - firstIndex + 1);\n    return this.syncItems(nextItemInfos);\n  }\n  /**\n   * Removes the item corresponding to index.\n   * @ko index에 해당하는 아이템을 제거 한다.\n   */\n  public removeByIndex(index: number): this {\n    const nextItemInfos = this.getItems(true);\n\n    nextItemInfos.splice(index, 1);\n\n    return this.syncItems(nextItemInfos);\n  }\n  /**\n   * Removes the item corresponding to key.\n   * @ko key에 해당하는 아이템을 제거 한다.\n   */\n  public removeByKey(key: string | number): this {\n    const nextItemInfos = this.getItems(true);\n    const index = findIndex(nextItemInfos, (item) => item.key === key);\n\n    return this.removeByIndex(index);\n  }\n  /**\n   * Update the size of the items and render them.\n   * @ko 아이템들의 사이즈를 업데이트하고 렌더링을 한다.\n   * @param - Items to be updated. <ko>업데이트할 아이템들.</ko>\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public updateItems(items?: InfiniteGridItem[], options: RenderOptions = {}) {\n    this.groupManager.updateItems(items, options);\n    return this;\n  }\n  /**\n   * Return all items of InfiniteGrid.\n   * @ko InfiniteGrid의 모든 아이템들을 반환한다.\n   * @param - Whether to include items corresponding to placeholders. <ko>placeholder에 해당하는 아이템들을 포함할지 여부.</ko>\n   */\n  public getItems(includePlaceholders?: boolean): InfiniteGridItem[] {\n    return this.groupManager.getGroupItems(includePlaceholders);\n  }\n  /**\n   * Return visible items of InfiniteGrid.\n   * @ko InfiniteGrid의 보이는 아이템들을 반환한다.\n   * @param - Whether to include items corresponding to placeholders. <ko>placeholder에 해당하는 아이템들을 포함할지 여부.</ko>\n   */\n  public getVisibleItems(includePlaceholders?: boolean): InfiniteGridItem[] {\n    return this.groupManager.getVisibleItems(includePlaceholders);\n  }\n\n  /**\n   * Return rendering items of InfiniteGrid.\n   * @ko InfiniteGrid의 렌더링 아이템들을 반환한다.\n   */\n  public getRenderingItems(): InfiniteGridItem[] {\n    return this.groupManager.getRenderingItems();\n  }\n  /**\n   * Return all groups of InfiniteGrid.\n   * @ko InfiniteGrid의 모든 그룹들을 반환한다.\n   * @param - Whether to include groups corresponding to placeholders. <ko>placeholder에 해당하는 그룹들을 포함할지 여부.</ko>\n   */\n  public getGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    return this.groupManager.getGroups(includePlaceholders);\n  }\n  /**\n   * Return visible groups of InfiniteGrid.\n   * @ko InfiniteGrid의 보이는 그룹들을 반환한다.\n   * @param - Whether to include groups corresponding to placeholders. <ko>placeholder에 해당하는 그룹들을 포함할지 여부.</ko>\n   */\n  public getVisibleGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    return this.groupManager.getVisibleGroups(includePlaceholders);\n  }\n  /**\n   * Set to wait to request data.\n   * @ko 데이터를 요청하기 위해 대기 상태로 설정한다.\n   * @param direction - direction in which data will be added. <ko>데이터를 추가하기 위한 방향.</ko>\n   */\n  public wait(direction: \"start\" | \"end\" = DIRECTION.END) {\n    this._waitType = direction;\n    this._checkStartLoading(direction);\n  }\n  /**\n   * When the data request is complete, it is set to ready state.\n   * @ko 데이터 요청이 끝났다면 준비 상태로 설정한다.\n   */\n  public ready() {\n    this._waitType = \"\";\n  }\n  /**\n   * Returns whether it is set to wait to request data.\n   * @ko 데이터를 요청하기 위해 대기 상태로 설정되어 있는지 여부를 반환한다.\n   */\n  public isWait() {\n    return !!this._waitType;\n  }\n  /**\n   * Releases the instnace and events and returns the CSS of the container and elements.\n   * @ko 인스턴스와 이벤트를 해제하고 컨테이너와 엘리먼트들의 CSS를 되돌린다.\n   */\n  public destroy(): void {\n    this.off();\n    this._getRenderer().destroy();\n    this.containerManager.destroy();\n    this.groupManager.destroy();\n    this.scrollManager.destroy();\n    this.infinite.destroy();\n  }\n\n  private _getRenderer() {\n    return this.options.renderer!;\n  }\n  private _getRendererItems() {\n    return this.getRenderingItems().map((item) => {\n      return {\n        element: item.element,\n        key: `${item.type}_${item.key}`,\n        orgItem: item,\n      };\n    });\n  }\n  private _syncItems(state?: Record<string, any>): void {\n    this._getRenderer().syncItems(this._getRendererItems(), state);\n  }\n  private _render(state?: Record<string, any>): void {\n    this._getRenderer().render(this._getRendererItems(), state);\n  }\n  private _update(state: Record<string, any> = {}): void {\n    this._getRenderer().update(state);\n  }\n  private _resizeScroll() {\n    const scrollManager = this.scrollManager;\n\n    scrollManager.resize();\n\n    this.infinite.setSize(scrollManager.getContentSize());\n  }\n  private _syncGroups(isUpdate?: boolean) {\n    const infinite = this.infinite;\n    const scrollManager = this.scrollManager;\n\n    if (!scrollManager.getContentSize()) {\n      this._resizeScroll();\n    }\n    this._syncInfinite();\n    this.groupManager.setCursors(infinite.getStartCursor(), infinite.getEndCursor());\n    if (isUpdate) {\n      this._update();\n    } else {\n      this._render();\n    }\n  }\n  private _syncInfinite() {\n    this.infinite.syncItems(this.getGroups(true).map(({ groupKey, grid, type }) => {\n      const outlines = grid.getOutlines();\n\n      return {\n        key: groupKey,\n        isVirtual: type === GROUP_TYPE.VIRTUAL,\n        startOutline: outlines.start,\n        endOutline: outlines.end,\n      };\n    }));\n  }\n  private _scroll() {\n    this.infinite.scroll(this.scrollManager.getRelativeScrollPos());\n  }\n  private _onScroll = ({ direction, scrollPos, relativeScrollPos }: OnChangeScroll): void => {\n    this._scroll();\n    /**\n     * This event is fired when scrolling.\n     * @ko 스크롤하면 발생하는 이벤트이다.\n     * @event InfiniteGrid#changeScroll\n     * @param {InfiniteGrid.OnChangeScroll} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this.trigger(new ComponentEvent(INFINITEGRID_EVENTS.CHANGE_SCROLL, {\n      direction,\n      scrollPos,\n      relativeScrollPos,\n    }));\n  }\n\n  private _onChange = (e: OnInfiniteChange): void => {\n    this.setCursors(e.nextStartCursor, e.nextEndCursor);\n  }\n  private _onRendererUpdated = (e: OnRendererUpdated<GridRendererItem>): void => {\n    if (!e.isChanged) {\n      this._checkEndLoading();\n      this._scroll();\n      return;\n    }\n    const renderedItems = e.items;\n\n    const {\n      added,\n      removed,\n      prevList,\n      list,\n    } = e.diffResult;\n\n    removed.forEach((index) => {\n      const orgItem = prevList[index].orgItem;\n\n      if (orgItem.mountState !== MOUNT_STATE.UNCHECKED) {\n        orgItem.mountState = MOUNT_STATE.UNMOUNTED;\n      }\n    });\n\n    renderedItems.forEach((item) => {\n      // set grid element\n      const gridItem = item.orgItem;\n\n      gridItem.element = item.element as HTMLElement;\n    });\n\n    const horizontal = this.options.horizontal;\n    const addedItems = added.map((index) => {\n      const gridItem = list[index].orgItem;\n      const element = gridItem.element!;\n\n      if (gridItem.type === ITEM_TYPE.VIRTUAL) {\n        const cssRect = { ...gridItem.cssRect };\n        const rect = gridItem.rect;\n\n        if (!cssRect.width && rect.width) {\n          cssRect.width = rect.width;\n        }\n        if (!cssRect.height && rect.height) {\n          cssRect.height = rect.height;\n        }\n        // virtual item\n        return new GridItem(horizontal!, {\n          element,\n          cssRect,\n        });\n      }\n      return gridItem;\n    });\n\n    const containerManager = this.containerManager;\n    if (this.options.observeChildren) {\n      containerManager.observeChildren(added.map((index) => list[index].element!));\n      containerManager.unobserveChildren(removed.map((index) => prevList[index].element!));\n    }\n\n    const {\n      isRestore,\n      isResize,\n    } = e.state;\n\n    this.itemRenderer.renderItems(addedItems);\n\n    if (isRestore) {\n      this._onRenderComplete({\n        mounted: added.map((index) => list[index].orgItem),\n        updated: [],\n        isResize: false,\n        direction: this.defaultDirection,\n      });\n    }\n    if (!isRestore || isResize || e.isItemChanged) {\n      this.groupManager.renderItems();\n    }\n  }\n\n  private _onResize = (e: ResizeWatcherResizeEvent) => {\n    if (e.isResizeContainer) {\n      this._renderItems({ useResize: true }, true);\n    } else {\n      const updatedItems = getUpdatedItems(this.getVisibleItems(), e.childEntries) as InfiniteGridItem[];\n\n      if (updatedItems.length > 0) {\n        this.updateItems(updatedItems);\n      }\n    }\n  }\n\n  private _onRequestAppend = (e: OnRequestInsert): void => {\n    /**\n     * The event is fired when scrolling reaches the end or when data for a virtual group is required.\n     * @ko 스크롤이 끝에 도달하거나 virtual 그룹에 대한 데이터가 필요한 경우 이벤트가 발생한다.\n     * @event InfiniteGrid#requestAppend\n     * @param {InfiniteGrid.OnRequestAppend} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this._onRequestInsert(DIRECTION.END, INFINITEGRID_EVENTS.REQUEST_APPEND, e);\n  }\n\n  private _onRequestPrepend = (e: OnInfiniteRequestPrepend): void => {\n    /**\n     * The event is fired when scrolling reaches the start or when data for a virtual group is required.\n     * @ko 스크롤이 끝에 도달하거나 virtual 그룹에 대한 데이터가 필요한 경우 이벤트가 발생한다.\n     * @event InfiniteGrid#requestPrepend\n     * @param {InfiniteGrid.OnRequestPrepend} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this._onRequestInsert(DIRECTION.START, INFINITEGRID_EVENTS.REQUEST_PREPEND, e);\n  }\n\n  private _onRequestInsert(\n    direction: \"start\" | \"end\",\n    eventType: \"requestAppend\" | \"requestPrepend\",\n    e: OnInfiniteRequestAppend | OnInfiniteRequestPrepend,\n  ) {\n    if (this._waitType) {\n      this._checkStartLoading(this._waitType);\n      return;\n    }\n    this.trigger(new ComponentEvent(eventType, {\n      groupKey: e.key,\n      nextGroupKey: e.nextKey,\n      nextGroupKeys: e.nextKeys || [],\n      isVirtual: e.isVirtual,\n      wait: () => {\n        this.wait(direction);\n      },\n      ready: () => {\n        this.ready();\n      },\n    }));\n  }\n\n  private _onContentError = ({ element, target, item, update }: OnContentError): void => {\n    /**\n     * The event is fired when scrolling reaches the start or when data for a virtual group is required.\n     * @ko 스크롤이 끝에 도달하거나 virtual 그룹에 대한 데이터가 필요한 경우 이벤트가 발생한다.\n     * @event InfiniteGrid#contentError\n     * @param {InfiniteGrid.OnContentError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this.trigger(new ComponentEvent(INFINITEGRID_EVENTS.CONTENT_ERROR, {\n      element,\n      target,\n      item: item as InfiniteGridItem,\n      update,\n      remove: () => {\n        this.removeByKey(item.key!);\n      },\n    }));\n  }\n\n  private _onRenderComplete = ({ isResize, mounted, updated, direction }: OnPickedRenderComplete): void => {\n    const infinite = this.infinite;\n    const prevRenderedGroups = infinite.getRenderedVisibleItems();\n    const length = prevRenderedGroups.length;\n    const isDirectionEnd = direction === DIRECTION.END;\n\n    this._syncInfinite();\n\n    if (length) {\n      const prevStandardGroup = prevRenderedGroups[isDirectionEnd ? 0 : length - 1];\n      const nextStandardGroup = infinite.getItemByKey(prevStandardGroup.key);\n      const offset = isDirectionEnd\n        ? Math.min(...nextStandardGroup.startOutline) - Math.min(...prevStandardGroup.startOutline)\n        : Math.max(...nextStandardGroup.endOutline) - Math.max(...prevStandardGroup.endOutline);\n\n      this.scrollManager.scrollBy(offset);\n    }\n\n    /**\n     * This event is fired when the InfiniteGrid has completed rendering.\n     * @ko InfiniteGrid가 렌더링이 완료됐을 때 이벤트가 발생한다.\n     * @event InfiniteGrid#renderComplete\n     * @param {InfiniteGrid.OnRenderComplete} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this.trigger(new ComponentEvent(INFINITEGRID_EVENTS.RENDER_COMPLETE, {\n      isResize,\n      direction,\n      mounted: (mounted as InfiniteGridItem[]).filter((item) => item.type !== ITEM_TYPE.LOADING),\n      updated: (updated as InfiniteGridItem[]).filter((item) => item.type !== ITEM_TYPE.LOADING),\n      startCursor: this.getStartCursor(),\n      endCursor: this.getEndCursor(),\n      items: this.getVisibleItems(true),\n      groups: this.getVisibleGroups(true),\n    }));\n\n    if (this.groupManager.shouldRerenderItems()) {\n      this._update();\n    } else {\n      this._checkEndLoading();\n      this._scroll();\n    }\n  }\n  private _renderItems(options: RenderOptions = {}, isTrusted?: boolean) {\n    if (!isTrusted && options.useResize) {\n      this.containerManager.resize();\n    }\n    this._resizeScroll();\n    if (!this.getRenderingItems().length) {\n      const children = toArray(this.getContainerElement().children);\n      if (children.length > 0) {\n        // no items, but has children\n        this.groupManager.syncItems(convertInsertedItems(children));\n        this._syncInfinite();\n        this.setCursors(0, 0, true);\n        this._getRenderer().updated();\n      } else {\n        this.infinite.scroll(0);\n      }\n      return this;\n    }\n    if (!this.getVisibleGroups(true).length) {\n      this.setCursors(0, 0);\n    } else {\n      this.groupManager.renderItems(options);\n    }\n    return this;\n  }\n  private _checkStartLoading(direction: \"start\" | \"end\") {\n    const groupManager = this.groupManager;\n    const infinite = this.infinite;\n\n    if (\n      !groupManager.getLoadingType()\n      && infinite.isLoading(direction)\n      && groupManager.startLoading(direction)\n      && groupManager.hasLoadingItem()\n    ) {\n      this._update();\n    }\n  }\n  private _checkEndLoading() {\n    const groupManager = this.groupManager;\n    const loadingType = this.groupManager.getLoadingType();\n\n    if (\n      loadingType\n      && (!this._waitType || !this.infinite.isLoading(loadingType))\n      && groupManager.endLoading()\n      && groupManager.hasLoadingItem()\n    ) {\n      this._update();\n    }\n  }\n}\n\ninterface InfiniteGrid extends Properties<typeof InfiniteGrid> { }\n\nexport default InfiniteGrid;\n","import { MasonryGrid, MasonryGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.MasonryGrid.MasonryGridOptions\n */\nexport interface MasonryInfiniteGridOptions extends MasonryGridOptions, InfiniteGridOptions {\n}\n\n/**\n * MasonryInfiniteGrid is a grid that stacks items with the same width as a stack of bricks. Adjust the width of all images to the same size, find the lowest height column, and insert a new item.\n * @ko MasonryInfiniteGrid는 벽돌을 쌓아 올린 모양처럼 동일한 너비를 가진 아이템을 쌓는 레이아웃이다. 모든 이미지의 너비를 동일한 크기로 조정하고, 가장 높이가 낮은 열을 찾아 새로운 이미지를 삽입한다. 따라서 배치된 아이템 사이에 빈 공간이 생기지는 않지만 배치된 레이아웃의 아래쪽은 울퉁불퉁해진다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {MasonryInfiniteGridOptions} options - The option object of the MasonryInfiniteGrid module <ko>MasonryInfiniteGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class MasonryInfiniteGrid extends InfiniteGrid<MasonryInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...MasonryGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<MasonryInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...MasonryGrid.defaultOptions,\n    gridConstructor: MasonryGrid,\n  } as const;\n}\n","import { JustifiedGrid, JustifiedGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.JustifiedGrid.JustifiedGridOptions\n */\nexport interface JustifiedInfiniteGridOptions extends JustifiedGridOptions, InfiniteGridOptions {\n}\n\n/**\n * 'justified' is a printing term with the meaning that 'it fits in one row wide'. JustifiedInfiniteGrid is a grid that the item is filled up on the basis of a line given a size.\n * If 'data-grid-inline-offset' or 'data-grid-content-offset' are set for item element, the ratio is maintained except for the offset value.\n * If 'data-grid-maintained-target' is set for an element whose ratio is to be maintained, the item is rendered while maintaining the ratio of the element.\n * @ko 'justified'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. JustifiedInfiniteGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템가 가득 차도록 배치하는 Grid다.\n * 아이템 엘리먼트에 'data-grid-inline-offset' 또는 'data-grid-content-offset'를 설정하면 offset 값을 제외하고 비율을 유지한다.\n * 비율을 유지하고 싶은 엘리먼트에 'data-grid-maintained-target'을 설정한다면 해당 엘리먼트의 비율을 유지하면서 아이템이 렌더링이 된다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {JustifiedInfiniteGridOptions} options - The option object of the JustifiedInfiniteGrid module <ko>JustifiedInfiniteGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class JustifiedInfiniteGrid extends InfiniteGrid<JustifiedInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...JustifiedGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<JustifiedInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...JustifiedGrid.defaultOptions,\n    gridConstructor: JustifiedGrid,\n  } as const;\n}\n","import { FrameGrid, FrameGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.FrameGrid.FrameGridOptions\n */\nexport interface FrameInfiniteGridOptions extends FrameGridOptions, InfiniteGridOptions {\n}\n\n/**\n * 'Frame' is a printing term with the meaning that 'it fits in one row wide'. FrameInfiniteGrid is a grid that the item is filled up on the basis of a line given a size.\n * @ko 'Frame'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. FrameInfiniteGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템이 가득 차도록 배치하는 Grid다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {FrameInfiniteGridOptions} options - The option object of the FrameInfiniteGrid module <ko>FrameGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class FrameInfiniteGrid extends InfiniteGrid<FrameInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...FrameGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<FrameInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...FrameGrid.defaultOptions,\n    gridConstructor: FrameGrid,\n  } as const;\n}\n","import { PackingGrid, PackingGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.PackingGrid.PackingGridOptions\n */\nexport interface PackingInfiniteGridOptions extends PackingGridOptions, InfiniteGridOptions {\n}\n\n/**\n * The PackingInfiniteGrid is a grid that shows the important items bigger without sacrificing the weight of the items.\n * Rows and columns are separated so that items are dynamically placed within the horizontal and vertical space rather than arranged in an orderly fashion.\n * If `sizeWeight` is higher than `ratioWeight`, the size of items is preserved as much as possible.\n * Conversely, if `ratioWeight` is higher than `sizeWeight`, the ratio of items is preserved as much as possible.\n * @ko PackingInfiniteGrid는 아이템의 본래 크기에 따른 비중을 해치지 않으면서 중요한 카드는 더 크게 보여 주는 레이아웃이다.\n * 행과 열이 구분돼 아이템을 정돈되게 배치하는 대신 가로세로 일정 공간 내에서 동적으로 아이템을 배치한다.\n * `sizeWeight`가 `ratioWeight`보다 높으면 아이템들의 size가 최대한 보존이 된다.\n * 반대로 `ratioWeight`가 `sizeWeight`보다 높으면 아이템들의 비율이 최대한 보존이 된다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {PackingInfiniteGridOptions} options - The option object of the PackingInfiniteGrid module <ko>PackingInfiniteGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class PackingInfiniteGrid extends InfiniteGrid<PackingInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...PackingGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<PackingInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...PackingGrid.defaultOptions,\n    gridConstructor: PackingGrid,\n  };\n}\n","import InfiniteGrid, * as modules from \"./index\";\n\nfor (const name in modules) {\n  (InfiniteGrid as any)[name] = (modules as any)[name];\n}\n\nexport default InfiniteGrid;\n"],"names":["ua","window","navigator","userAgent","IS_IOS","test","CONTAINER_CLASS_NAME","IGNORE_PROPERITES_MAP","renderOnPropertyChange","useFit","autoResize","INFINITEGRID_PROPERTY_TYPES","GRID_PROPERTY_TYPES","DIRECTION","START","END","NONE","INFINITEGRID_EVENTS","CHANGE_SCROLL","REQUEST_APPEND","REQUEST_PREPEND","RENDER_COMPLETE","CONTENT_ERROR","ITEM_INFO_PROPERTIES","type","groupKey","key","element","html","data","INFINITEGRID_METHODS","GROUP_TYPE","ITEM_TYPE","STATUS_TYPE","INVISIBLE_POS","__extends","horizontal","itemStatus","_super","__assign","NORMAL","cssRect","top","left","_this","VIRTUAL","rect","width","height","mountState","MOUNT_STATE","UNMOUNTED","orgRect","attributes","status","getMinimizedStatus","GridItem","LOADING_GROUP_KEY","LOADING_ITEM_KEY","items","item","loadingItem","getLoadingItem","InfiniteGridItem","options","LOADING","name","direction","outline","length","start","end","nextOutline","offset","contentSize","gap","cssInlinePos","getContainerInlineSize","inlineSize","maxPos","Math","max","cssContentPos","map","pos","minPos","min","Grid","isWindow","el","isNumber","val","isString","isObject","flat","arr","reduce","prev","cur","splitOptions","gridOptions","otherOptions","splitGridOptions","nextOptions","defaultOptions","value","categorize","groups","groupKeys","registeredGroupKeys","filter","forEach","_a","generatedGroupKey","isContinuousGroupKey","makeKey","group","push","getNextCursors","prevKeys","nextKeys","prevStartCursor","prevEndCursor","result","diff","nextStartCursor","nextEndCursor","maintained","prevIndex","nextIndex","startCursor","endCursor","splitVirtualGroups","nextGroups","virtualGroups","index","findIndex","endMaintainedIndex","nextGroup","endIndex","slice","findLastIndex","startMaintainedIndex","startIndex","getFirstRenderingItems","nextItems","getRenderingItemsByStatus","groupManagerStatus","usePlaceholder","prevGroups","startVirtualGroups","endVirtualGroups","__spreadArray","cursors","nextVisibleItems","mountRenderingItems","grid","useLoading","useFirstRender","setPlaceholder","setLoading","setStatus","syncItems","getGroups","setCursors","getRenderingItems","visibleItems","groupManager","InfiniteGridGetterSetter","component","prototype","propertyTypes","enumerable","configurable","get","set","prevValue","Object","defineProperty","registeredKeys","prefix","convertHTMLtoElement","dummy","document","createElement","innerHTML","toArray","children","convertInsertedItems","insertedItems","outerHTML","nodes","array","i","callback","getItemInfo","info","nextInfo","isFlatOutline","every","range","flatGroups","getItems","filterVirtuals","includePlaceholders","withInfiniteGridMethods","withClassMethods","container","_loadingGrid","LoadingGrid","externalContainerManager","containerManager","_mainGrid","_makeGrid","shouldRender","_checkShouldRender","scheduleRender","itemKeys","groupItems","hasPlaceholder","getVisibleGroups","some","_placeholder","_getLoadingItem","updateItems","placeholder","_updatePlaceholder","_getRenderingItems","prevType","loading","setLoadingItem","getComputedOutlineLength","getComputedOutlineSize","renderingGroups","loadingGrid","unshift","_getLoadingGroup","reverse","outlineLength","outlineSize","gridItems","isVirtual","appliedItems","UNCHECKED","gridOutlines","_applyVirtualGrid","applyGrid","setOutlines","getOutlines","nextItemInfos","prevItemKeys","_syncItemInfos","prevGroupKeys","nextManagerGroups","_splitVirtualGroups","_mergeVirtualGroups","setItems","renderItems","_registerGroups","useResize","updateState","UPDATE_STATE","NEED_UPDATE","orgStartCursor","orgEndCursor","orgGroups","startGroup","endGroup","isMinimizeItems","MINIMIZE_INVISIBLE_ITEMS","isMinimizeGroups","MINIMIZE_INVISIBLE_GROUPS","REMOVE_INVISIBLE_GROUPS","orgIndex","orgGroup","indexOf","lastIndexOf","groupStatus","isOutsideCursor","isVirtualItems","isVirtualGroup","getVirtualStatus","outlines","totalItems","getGroupItems","itemStartCursor","itemEndCursor","orgCursors","itemCursors","startGroupKey","endGroupKey","firstGroup","startOutline","outlineOffset","_b","point","contentPos","insertPlaceholders","splice","groupKey_1","infos","Array","isArray","isRerender","GridConstructor","gridConstructor","prevOptions","PROPERTY_TYPE","RENDER_PROPERTY","prevOutlines","prevOutline","nextItemKeys","prevItem","nextGroupKeys","_getGroupItems","prevGroup","containerElement","useResizeObserver","observeChildren","externalItemRenderer","itemRenderer","GroupManager","PROPERTY","GetterSetter","threshold","useRecycle","defaultDirection","scrollPos","size","_c","isDirectionEnd","trigger","undefined","nextCursor","endScrollPos","startEdgePos","endEdgePos","endOutline","visibles","startPos","endPos","hasStartItems","hasEndItems","isStart","isEnd","hasRealItem","hasVirtualItems","isStartVirtual","isEndVirtual","realItemIndex","endVirtualItemIndex","nextKey","startVirtualItemIndex","_requestVirtualItems","totalVisibleItems","getVisibleItems","totalVisibleLength","visibleLength","getStartCursor","getEndCursor","startKey_1","endKey_1","lastItem","firstItem","prevItems","isChange","prevVisibleItems","visibleResult","added","removed","changed","rendered","off","Component","rendererKey","Date","now","state","_state","clearTimeout","_updateTimer","setTimeout","nextElements","diffResult","_diffResult","isChanged","isItemChanged","_isItemChanged","list","elements","renderKey","render","prevList","ordered","diffList","removeChild","insertBefore","updated","Renderer","orgItem","VanillaRenderer","wrapper","prevScrollPos","getScrollPos","nextScrollPos","getOrgScrollPos","setScrollPos","_isScrollIssue","ComponentEvent","relativeScrollPos","getRelativeScrollPos","containerTag","scrollContainer","_init","scrollOffset","eventTarget","prop","documentElement","body","scrollTo","x","y","scroll","scrollLeft","scrollTop","scrollBy","isBody","scrollContainerRect","getBoundingClientRect","containerRect","innerWidth","innerHeight","offsetWidth","offsetHeight","removeEventListener","_onCheck","_isCreateElement","fragment_1","createDocumentFragment","childNodes","childNode","appendChild","style","cssText","_orgCSSText","containerOption","scrollContainerOption","containerCSSText","findTarget","position","className","overflowX","overflowY","addEventListener","resize","_scroll","e","_checkEndLoading","renderedItems","gridItem","addedItems","unobserveChildren","isRestore","isResize","_onRenderComplete","mounted","isResizeContainer","_renderItems","updatedItems","getUpdatedItems","childEntries","_onRequestInsert","target","update","remove","removeByKey","infinite","prevRenderedGroups","getRenderedVisibleItems","_syncInfinite","prevStandardGroup","nextStandardGroup","getItemByKey","scrollManager","shouldRerenderItems","_update","constructor","renderer","VanillaGridRenderer","on","_render","attributePrefix","useTransform","percentage","isConstantSize","isEqualSize","resizeDebounce","maxResizeDebounce","wrapperElement","querySelector","ScrollManager","_onScroll","getContainer","ContainerManager","_onResize","ItemRenderer","Infinite","_onChange","_onRequestAppend","_onRequestPrepend","setSize","getContentSize","_onContentError","setContainer","_onRendererUpdated","InfiniteGrid","getWrapper","getScrollContainer","_syncGroups","_syncItems","insert","itemInfos","groupIndex","nextGroupInfos","rightGroup","append","rightGroupKey","rightItemIndex","getStatus","getGroupStatus","appendPlaceholders","removePlaceholders","prependPlaceholders","prevInlineSize","getInlineSize","setGroupStatus","_getRenderer","updateKey","removeGroupByKey","firstIndex","lastIndex","removeByIndex","_waitType","_checkStartLoading","destroy","_getRendererItems","isUpdate","_resizeScroll","eventType","nextGroupKey","wait","ready","isTrusted","getContainerElement","getLoadingType","isLoading","startLoading","hasLoadingItem","loadingType","endLoading","DEFAULT_GRID_OPTIONS","MasonryInfiniteGrid","MasonryGrid","JustifiedInfiniteGrid","JustifiedGrid","FrameInfiniteGrid","FrameGrid","PackingInfiniteGrid","PackingGrid","modules"],"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"}